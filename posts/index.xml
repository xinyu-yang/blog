<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 麋鹿博客 (Elk blog) | 一个分享知识和乐趣的地方</title><link>https://xinyu-yang.github.io/blog/posts/</link><description>所有文章 | 麋鹿博客 (Elk blog) | 一个分享知识和乐趣的地方</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yangxinyu75@qq.com (Xinyu Yang)</managingEditor><webMaster>yangxinyu75@qq.com (Xinyu Yang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 04 Dec 2021 00:11:45 +0800</lastBuildDate><atom:link href="https://xinyu-yang.github.io/blog/posts/" rel="self" type="application/rss+xml"/><item><title>Markdown 中的数学公式</title><link>https://xinyu-yang.github.io/blog/2021/21-12-04_math-in-markdown/</link><pubDate>Sat, 04 Dec 2021 00:11:45 +0800</pubDate><author>作者</author><guid>https://xinyu-yang.github.io/blog/2021/21-12-04_math-in-markdown/</guid><description><![CDATA[<p>本文主要记录在使用不同的主题时，所遇到的有关 markdown 中公式渲染的问题。</p>
<p>首先是 even 主题，该主题使用的是 mathjax 进行公式的渲染，经过网上了解， mathjax 是一个很成熟的解决方案，所以其对数学公式的支持还是很完善的，但是在使用较复杂的数学公式环境过程中还是遇到了一个问题，如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">\begin{align}
x <span class="err">&amp;</span>= y + 1 \\
y <span class="err">&amp;</span>= z + 2
\end{align}
</code></pre></td></tr></table>
</div>
</div><p>在 $\LaTeX$ 中是没有问题的，但是在 hugo 就无法被正确渲染，只有将换行符<code>\\</code>更改为<code>\\\\</code>才能正常工作，好像看到网上有相关的讨论（没有记录），说导致该问题的原因是 markdown 编译器在进行解析的时候会将第一斜杠解释为<em>转义</em>，那么最后的结果是只剩一个斜杠，所以如果想让其最后仍然有两个斜杠，则不得不用四个斜杠。虽说敲四个斜杠是麻烦了点，但是好歹问题算是大概解决了。</p>
<p>后来试用 CodeIT 主题时则出现了更严重的问题，主要是因为该主题使用的是据说是性能更好的 $KaTeX$ 渲染器。该渲染器作为托管在 github 的开源项目还是挺受欢迎的，但是 katex 对于公式的支持就不那么完善了，截止到目前的最新版本 0.13.0，刚能够支持诸如<code>align,align*</code>等环境。而 CodeIT 使用的仍然是 0.11.1 的老版本，但这还不是主要问题，主要问题是原本在 mathjax 中可行的方案在 katex 中不可行了，比如根据<a href="https://katex.org/docs/0.11.1/supported.html" target="_blank" rel="noopener noreferrer">文档</a> katex v0.11.1 中是支持<code>aligned</code>环境的，但是以下代码并不能够被正确渲染：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">\begin{aligned}
x <span class="err">&amp;</span>= y + 1 \\\\
y <span class="err">&amp;</span>= z + 2
\end{aligned}
</code></pre></td></tr></table>
</div>
</div><p>该代码可以在 even 主题下正常工作，但是无法在 CodeIT 在工作，经网上搜索，发现了该<a href="https://github.com/halogenica/beautifulhugo/issues/183" target="_blank" rel="noopener noreferrer">解决方案</a>，经该方案介绍，使用如下代码可正常工作：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">\begin{aligned}
x <span class="err">&amp;</span>= y + 1 \cr
y <span class="err">&amp;</span>= z + 2
\end{aligned}
</code></pre></td></tr></table>
</div>
</div><p>其效果为：
$$
\begin{aligned}
x &amp;= y + 1 \cr
y &amp;= z + 2
\end{aligned}
$$</p>
<p>主要改动为将斜杠更换为<code>\cr</code>，经测试可以正常工作，然后将该方式在 even 主题中测试也可以工作，所以就计划采用这种方式来代替双斜杠的功能，虽然感觉像是最后对问题的妥协，但是好歹是解决了该问题😂</p>
<p>后来有对问题做进一步的探索，做法是在浏览器中查看网页的源代码，我发现使用斜杠做为换行符的方式都会在公式行的最后引入一个<code>&lt;br&gt;</code>标签，如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">\begin{aligned}
x <span class="ni">&amp;amp;</span>= y + 1 \\ <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
y <span class="ni">&amp;amp;</span>= z + 2
\end{aligned}
</code></pre></td></tr></table>
</div>
</div><p>具有标签的代码在使用 mathjax 渲染器的时候是可以被正常渲染的，但是在 katex 中却不行。而使用<code>\cr</code>进行换行则不会引入<code>&lt;br&gt;</code>标签，因此在 katex 中可用。
最后附上将换行符更改为<code>\cr</code>的命令:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sed -i <span class="s1">&#39;s/\\\\\\\\/\\cr/&#39;</span> <span class="o">[</span>blogname<span class="o">]</span>.md
</code></pre></td></tr></table>
</div>
</div><p>&mdash;&mdash;&mdash;&mdash;21/04/08更新&mdash;&mdash;&mdash;&ndash;</p>
<p>除上述所示问题外，今天又遇到了另外一个问题，那就是在公式中使用特殊字符（如%）时需要进行转义，一般写为<code>\%</code>，但是这又会遇到一个问题，就是在$符号之间的字符不能够像在 ` 符号中那样被免于转义。也就是说<code>\%</code>中的斜杠会在markdown解析的过程中解析为转义字符，因此到公式解析器的时候剩下的就只剩一个%符号了，所以需要使用两个符号才行。关于这个问题，感觉主要问题还是在markdown解析器那里没有执行正确的解析。当然，以上只是我的猜想，有时间我会去验证的。</p>
<p>知道问题之后的解决方式呢？如果实在不得不用特殊字符的转义，那就使用上述方法，可以解决。如果不是必要，比如我这里就是将%作为模运算符号，其实math里有专门的符号<code>\mod</code>表示该含义，所以出于兼容性期间，决定使用<code>\mod</code>符号，因为万一哪一天markdown解析器可以正常解析了，岂不是还要把两个斜线换成一个。</p>
<p>同时这里有一个总结：
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>总结<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><strong>在markdown的公式环境中尽量减少使用转义符👉<code>\</code>👈</strong></div>
        </div>
    </div></p>]]></description></item><item><title>乘坐北京地铁有感</title><link>https://xinyu-yang.github.io/blog/2021/21-11-24_beijing-subway/</link><pubDate>Wed, 24 Nov 2021 20:21:38 +0800</pubDate><author>作者</author><guid>https://xinyu-yang.github.io/blog/2021/21-11-24_beijing-subway/</guid><description><![CDATA[<p>今天再次有幸乘坐北京早上八点左右的地铁，有一些想法，本文进行记录。</p>
<p>之所以强调北京早上八点的地铁，因为这个时候的地铁不同一般时间，具有鲜明的特点。如果用一个字来形容的话，那就是“快”。不光地铁快，人也快。
人是怎么个快法呢？就是地铁站里的乘客大多都是在小跑，而不是普通的走路甚至是快走。此时的乘客就像是灾难电影中慌忙逃生的人群。如果是初次置身于此情此景，恐怕会感到惊讶。</p>
<p>仍记得 17 年刚来北京那会，年少无知，坐扶梯的时候站在了扶梯左侧，受到过几次不耐烦的“借过一下”甚至是抱怨。
我刚开始还觉得有点奇怪，后来渐渐习惯了便察觉自己之前的少不更事，并养成了坐扶梯一定站在右边的习惯，或者干脆加入他们，在左侧走，体验速度x2。</p>
<p>这个习惯是在北京养成的，以至于后来即使在其他城市坐地铁时也是如此。即使这些城市没有人在扶梯上走，事实上北京也是我迄今为止唯一经历过此情此景的城市。当然，原因可能是我并没有经历过其他城市的早高峰。</p>
<p>其实三年前有过一段时间的工作经历，也是每天都在赶早高峰，但是这次经历似乎有不一样的体验。或许是自己三年来对这个场景变得陌生，也或许是自己当时没有时间静心观察这些。
不知为何，此时心里突然有了一个令自己哭笑不得的想法：希望以后自己能做一个走着坐地铁的人。</p>
<p>今天在做第一班车的时候空间还算比较富裕，但是当转到另外一条线时，情况就发生了变化。看着停靠的车厢里挤满了人，本以为会有好多人下车，从而能够给我们下面这帮排队的人腾出点位置。可没曾想居然一个下的都没有，看着队列前面还有好几个人，就想着等前面几个上去，然后自己等下一班吧。
结果等我前面的人都走强行挤上去之后，我后面的人也跃跃欲试，此时上不上车已由不得我了，因此只能拼命挤上车，为了不让门夹住书包，只得拼命抓紧扶手把自己的身体往里挤。</p>
<p>还好等到门顺利关上，我就可以稍微放松，把身体倚在门上。很快到了下一站，可怕的是这种情况还在重复，又挤上来两个大姐。我本来握在侧边扶手上的手被大姐建议“抬一下”以便她能上来，然后我就把手以一个奇怪的角度握住上方的扶杆。
因为姿势别扭且费力，我就想反正都几乎动不了了，也就没必要扶什么扶手了。想到这里我自认为机智地把手松开，然后发现我的手似乎没地可放，垂直放下去是不可能的，因为此时很难通过那道人与人之间紧贴而形成的屏障。
所以我就又把手搭在了扶手上，这下扶手可真的被用来“扶”手了。</p>
<p>当我在车厢里无聊的左顾右看的时候，我注意到其实大多数人都很专注，有的在专心刷短视频，有的在看剧，甚至还有的在玩连连看。
总之，为了不浪费在车上的时间，社畜们各显神通。令人惊奇的是，在这种环境下，他们居然表现出了就像在自家沙发上玩手机一样的舒适感，人类超强的适应能力再次得到了证明。</p>
<p>随后我又想到了一个问题，他们是怎么把手机拿出来的呢？我感觉比较可能的答案就是：他们在上车的时候手机就一直拿在手里，高举着手机走进车厢，然后高举着下车。就像虔诚的信徒将十字架举过头顶，从而彰显着所持物品的无上地位。
想到这里感觉还挺有意思，似乎干愣着也没那么无聊了。</p>
<p>北京给我最深的印象不是遍布的古迹、公园，也不是繁华的商圈，而是北京的“快”和“挤”。不同的人肯定感触不同，而匆忙拥挤的生活节奏可能就是我这个阶层的人在这个城市所能拥有的最多的感受吧。</p>]]></description></item><item><title>托福考试总结</title><link>https://xinyu-yang.github.io/blog/2021/21-10-27_toefl-summary/</link><pubDate>Wed, 27 Oct 2021 10:34:07 +0800</pubDate><author>作者</author><guid>https://xinyu-yang.github.io/blog/2021/21-10-27_toefl-summary/</guid><description><![CDATA[<h2 id="心路历程">心路历程</h2>
<p>现在已经距离考试有一个多月了，早就打算写一写总结，但是一拖再拖，就像我下的坚持学习英语的决心那样，一直没有付诸实践。现在做一个简单的开篇，慢慢填补内容，免得再往后拖。</p>
<p>书归正传，我之所以要考英语，是因为要出国读博，（插播：写下这段文字的我刚收到纸质版 TOEFL 成绩单）。一直以来英语都是我不敢直面的学科，对于这门课我心里只有逃避，就想着某一天再也不用学英语。曾经高考的时候，以为高考就是结点。后来上大学之后，又结结实实被四六级折磨了几年，因为不是硬性毕业规定，所以直到本科毕业都没能考过六级（最高一次 423）。
后来考研，又不得不面对这个老对手，不过因为考研英语比较难，很难考出比较高的分数且拉开差距，所以并没有太多的压迫感。</p>
<p>到后来读研究生，发现英语不但没有从我的生命中消失，反而显得越发重要。从读论文，到听国外学者的讲座，甚至到自己参加国际会议，英语都必不可少。所以自己平时也在背背单词什么的，事实也证明，经常接触英语确实可以提高英语水平，因为在这期间通过了一直没有考过的英语六级。
但在我下定决心出国之前，也从没想过要考托福或者雅思之类的。</p>
<p>后来由于一些原因，在本实验室读博无望的情况下，我决定出国读博。相对于国际疫情和中美贸易战等因素，我最担心的可能就是自己的英语考试了。不管去哪个国家，英语是必须通过的标准，也是我在做准备工作时的最高优先级。</p>
<p>最终经过了三个多月的集中备考，总共经历了两次考试，最终的分数定格在了 103，这绝对不是一个高分，但对我来说已经是很不错的成绩了。
接下来将介绍我备考的经过。</p>
<h2 id="复习经验">复习经验</h2>
<p>正式的英语备考从研究生毕业开始，毕业之后就紧张的投入到备考之中了。首先是先报名，登录到网站上之后，我惊奇的发现北京最近的可以报名的时间竟然在四个多月之后。于是果断地查看了临近地区的考点，幸运的是石家庄就有两个月之后的名额，于是毫不（不敢）犹豫地报上了名。
刚开始备考的前几天我先在网上看了各种备考的经验和指南，对 TOEFL 有了一个大概的认识，包括考试时长、形式、大概内容等。
然后开始做了几套 TPO，做完之后发现阅读是我感觉唯一有把握的，听力完全听不懂，口语就更不用说了，完全不知道如何下手，至于作文嘛，感觉也没啥能力拿高分，就随便写了写~</p>
<p>于是，针对以上问题，我开始了备考准备之路。首先按照网上的备考经验用 Excel 表格做了一个备考计划，第一次计划了一周的内容。打算先看看效果，然后再根据自己的情况进行调整。
刚开始的计划不算特别多，大概就是每天精听半套 TPO，做一套阅读题，写一篇作文并更改。对，在这个阶段，口语直接放弃了😂，或者是完全不知道怎么复习。</p>
<p>一周之后，计划差不多完成了。听力还是听不懂，阅读则可以稳定在 25 以上，作文还是语法错误连篇，且有时候不知道怎么写，在计时的时间内连 300 字都写不到。
于是，我针对该学习效果进行了计划的调整。将比较薄弱的听力调整为每天听写半套 TPO（后几天改成了跟读），阅读每天一篇，以维持状态。作文和<del>口语</del>复习方式不变。</p>
<p>又过了一周左右，发现听力还是没有提高，始终维持在 16-20 之间，鉴于听写或跟读实在是太耽误时间，再加上有的帖子说需要将 TPO 都听一篇，熟悉所有话题。我就决定还是精听吧，每天一套 TPO，提高速度。阅读偶尔会计时做一套，分数大概维持在 25-27 左右，但始终没有突破 27。
作文感觉好了一点点，但是进步不大。对于我来说，遣词造句都很困难，所以也就没有做过多的解题思路，答题逻辑方面的练习，而是将重点放在了如何能写出一些没有语法错误的句子。
与此同时，口语也每天练习一套，但一般都是草草就过了，有时候实在啥都说不出来的就多说几遍。后来的事实证明，这种口语练习方式不能说是收效甚微吧，简直可以说是毫无用处。</p>
<p>等差不多过了一个月左右的时候，听力还是没有提高。因为之前看过的很多备考帖子和视频都是建议精听，所以我就想当然地以为只要精听一段时间，听力自然而然的就会提高。
因此每天几乎如打卡一般，听完了就算完成任务了。
但已经精听了一个月了，我的听力还是没有提高，此时我已经有点慌了，我就想是不是这个方法不太适合我。于是又在网上重温了各种关于听力的备考经验帖、视频，甚至请教了前段时间备考的同学。
但似乎最终只能得出一个结论：继续保持精听。</p>
<p>即使心里非常忐忑，还是继续保持每天的精听练习，只是听的时候不敢再有丝毫大意，聚精会神，确保自己能听懂每一个词。
随着时间一天天过去，虽然偶尔听力分数能到 22-23 分，但是大部分还是在 20 分左右徘徊。在这期间阅读、作文和口语也都在练习。</p>
<p>很快就到了第一次考试，个人加考试环境等种种因素导致最终只考了 86（27+21+16+22） 分。此时距离备考已经过了两个月，最终还是没能考到 90 分，心情还是比较沮丧的。但同时也感觉 90 分不是那么遥不可及。</p>
<p>考完之后，觉得听力还是需要多加练习，当然，这一点我考试之前就知道，因为毕竟平时的练习效果摆在那，自己确实就是这个水平。
除了听力，另外让我震惊的就是口语了，分数低得超乎我的想象。不过想想自己之前复习口语的态度，也算是理所当然吧。</p>
<p>第二次考试跟第一次差了差不多 40 天，但感觉自己的有效复习时间顶多 20 天。因为第一次考试完等成绩的那一周时间几乎什么都没干。然后后来又干了点其他事，也算是对托福备考的逃避。</p>
<p>等考前 20 天左右再准备复习时，就采取了重点复习听力口语，保持阅读作文的策略（其实差不多一直这样）。听力的练习方式就是 1.5 倍速精听 TPO 真题，一套接着一套，一篇接着一篇，疯狂听。当然，对于每一篇，一定要完全听懂才算合格。</p>
<p>痛定思痛下，决定对口语也要采用更积极的态度去复习，说到这里，我不得不感谢在网上看到的一个备考经验贴。该帖给我提供了很多方法上的借鉴，同时还有心态上的鼓励。
发帖的应该是位小姐姐，她把自己的备考经验和资料放到了这个 <code>6635388600</code> 百度云盘群里，需要的可以加群下载。</p>
<p>这其中对我最重要的就是关于口语第一题的备考，大概思路就是找一些常用的语料库熟练背诵，然后说的时候就往上套。该方法其实可以分为两步：</p>
<ul>
<li>第一步：把所有的范文全部熟练背诵，最好能达到不假思索的程度</li>
<li>第二步：疯狂做题（每天 20+ ），把所有的题都往语料库上靠，然后熟练作答</li>
</ul>
<p>通过该方法，第一题可以比较熟练的答出来，这会给作答后面的几道题带来很大的信心提升。即使单从英语熟练度上来看，经常练习也是很有帮助的。</p>
<p>第二次考试的时候，口语从 16 分提高到了 22 分，虽然不高，但对我来说是一个很大的进步了。而这很大程度上都要感谢上面的练习方法。</p>
<h2 id="考试过程">考试过程</h2>
<p>疫情期间的报名和考试并不是一件容易的事情，对我来说，事实也是如此。报名的曲折和备考中的挫折可以说是相得益彰、互不相让。</p>
<p>首先，因为北京的考试报不上，就报名了还算离得比较近的石家庄，这个过程还算比较顺利。直到考试前两周的时候，收到了一条考场取消的短信，才拉开了我曲折的报名之路的大幕。考场由于官方取消，可以免费更换考场或者退考。
于是，没有任何迟疑，我迅速寻找周边能报名的地，搜索了一圈之后发现呼和浩特似乎是个不错的选项，从北京坐高铁只需要两个多小时。
已经算是周边离得最近的了，同时也觉得内蒙那边人烟应该比较稀少，不大可能因为疫情取消吧（实际上取消考场的石家庄好像也没有疫情消息，至少从官方上没有）。</p>
<p>于是就赶紧报名了内蒙古农业大学的考场，考试时间距离石家庄那场又晚了两周。心里感慨浪费了时间的同时还有一些庆幸，
感慨浪费时间是因为我不想第一次考试花太多时间备考，因为这样的话感觉容易一直陷入一些复习盲区，不能对自己的错误进行及时的纠正。
庆幸当然是因为我直到自己复习的实在是不行😂，反正就是想逃避。</p>
<p>等把石家庄的车票、住宿都退掉，然后又订好呼和浩特的车票和住宿，并全力备考的时候，我又收到了考场取消的消息。</p>
<p>欲知后事如何，请看下回分解。。。</p>
<h2 id="总结">总结</h2>]]></description></item><item><title>Vim学习记录</title><link>https://xinyu-yang.github.io/blog/2021/21-09-28_vim-learning/</link><pubDate>Tue, 28 Sep 2021 10:34:49 +0800</pubDate><author>作者</author><guid>https://xinyu-yang.github.io/blog/2021/21-09-28_vim-learning/</guid><description><![CDATA[<h2 id="介绍">介绍</h2>
<p>很久以来，一直想写一些关于 Vim 的使用博客。但是随着对 Vim 的了解加深，我意识到自己还达不到创作文章介绍Vim的能力。
一方面是因为自己对 Vim 的了解实在是有限，很多东西都只是鹦鹉学舌，了解简单的用法，而介绍这些基本用法的博客文章等浩如烟海，因此没有重复赘述的必要。
另一方面是因为随着学习的深入，我也接触到了很多优秀的博客文章，值得仔细研读。同时也意识到自己的水平跟这些文章的作者相去甚远，想要达到同等水平况且需要些时日，更不用说写出更有深度的东西了。</p>
<p>鉴于以上原因，我决定首先将我学习过程中所参考的优秀学习资料进行汇总和简介。如果初学者能看到本文，并因此在学习中少走些弯路，那便是本文的价值。
另外，我应该不会写偏向于大而全的 Vim 介绍博客，至少目前不会。但是我可能会写一些关于某些功能点的深入学习和记录的文章，我认为在当前网络中所能搜索到的文章中，这类更有价值。</p>
<p>目前本人主要使用的是 Vim ，但是目前 Neovim 似乎后来居上，大有取而代之之势，并且 github 上有很多优秀活跃的 Neovim 插件在开发。从长久趋势来看，新的东西总是基于已有设计，总结经验，克服弊端，并最终淘汰旧的。从传承上来看， Neovim 不过是对 Vim 的推倒重建式的重构，亦如当年 Vim 对于 Vi 编辑器的改良一般。</p>
<p>据称 Neovim 完全兼容 Vim 的功能和配置，并提供了额外的功能，从其风靡程度来看，我也相信这一点。但至少从目前来看，我还没有足够的理由和动机去使用它。也许还是缺少一个契机。这个契机就是遇到 Vim 无法或很难解决的痛点，并且 Neovim 可以很容易解决。而在这之前，则需要对 Vim 更加熟练的使用。</p>
<h2 id="综合教程">综合教程</h2>
<h3 id="入门教程-vimtutor">入门教程: Vimtutor</h3>
<p>Vimtutor 作为自带的官方教程，其作为入门教程的权威性自然不言而喻。当然，除了其明面上的地位之外，其作为一个入门教程，给初学者提供了一个很好的实际操作体验，该教程会提供一些例子供阅读者进行实际的操作，比起仅仅列举式的功能介绍，该导论还是挺容易被初学者接受的。
下面是截取的一部分例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="p">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><span class="err">
</span><span class="err"></span>                     <span class="nx">Lesson</span> <span class="m">1</span>.<span class="m">3</span>: <span class="nx">TEXT</span> <span class="nx">EDITING</span> <span class="p">-</span> <span class="nx">DELETION</span><span class="err">
</span><span class="err">
</span><span class="err">
</span><span class="err"></span>           ** <span class="nx">Press</span>  <span class="nx">x</span>  <span class="nx">to</span> <span class="nx">delete</span> <span class="nx">the</span> <span class="nx">character</span> <span class="nx">under</span> <span class="nx">the</span> <span class="nx">cursor</span>. **<span class="err">
</span><span class="err">
</span><span class="err"></span>  <span class="m">1</span>. <span class="nx">Move</span> <span class="nx">the</span> <span class="nx">cursor</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">line</span> <span class="nx">below</span> <span class="nx">marked</span> <span class="p">---&gt;</span>.<span class="err">
</span><span class="err">
</span><span class="err"></span>  <span class="m">2</span>. <span class="nx">To</span> <span class="nx">fix</span> <span class="nx">the</span> <span class="nx">errors</span><span class="p">,</span> <span class="nx">move</span> <span class="nx">the</span> <span class="nx">cursor</span> <span class="nx">until</span> <span class="nx">it</span> <span class="nx">is</span> <span class="nx">on</span> <span class="nx">top</span> <span class="nx">of</span> <span class="nx">the</span><span class="err">
</span><span class="err"></span>     <span class="nx">character</span> <span class="nx">to</span> <span class="nx">be</span> <span class="nx">deleted</span>.<span class="err">
</span><span class="err">
</span><span class="err"></span>  <span class="m">3</span>. <span class="nx">Press</span> <span class="nx">the</span>  <span class="nx">x</span>  <span class="nx">key</span> <span class="nx">to</span> <span class="nx">delete</span> <span class="nx">the</span> <span class="nx">unwanted</span> <span class="nx">character</span>.<span class="err">
</span><span class="err">
</span><span class="err"></span>  <span class="m">4</span>. <span class="nx">Repeat</span> <span class="nx">steps</span> <span class="m">2</span> <span class="nx">through</span> <span class="m">4</span> <span class="nx">until</span> <span class="nx">the</span> <span class="nx">sentence</span> <span class="nx">is</span> <span class="nx">correct</span>.<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="p">---&gt;</span> <span class="nx">The</span> <span class="nx">ccow</span> <span class="nx">jumpedd</span> <span class="nx">ovverr</span> <span class="nx">thhe</span> <span class="nx">mooon</span>.<span class="err">
</span><span class="err">
</span><span class="err"></span>  <span class="m">5</span>. <span class="nx">Now</span> <span class="nx">that</span> <span class="nx">the</span> <span class="nx">line</span> <span class="nx">is</span> <span class="nx">correct</span><span class="p">,</span> <span class="nx">go</span> <span class="nx">on</span> <span class="nx">to</span> <span class="nx">lesson</span> <span class="m">1</span>.<span class="m">4</span>.<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="nx">NOTE</span>: <span class="nx">As</span> <span class="nx">you</span> <span class="nx">go</span> <span class="nx">through</span> <span class="nx">this</span> <span class="nx">tutor</span><span class="p">,</span> <span class="nx">do</span> <span class="nx">not</span> <span class="nx">try</span> <span class="nx">to</span> <span class="nx">memorize</span><span class="p">,</span> <span class="nx">learn</span> <span class="nx">by</span> <span class="nx">usage</span>.<span class="err">
</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="p">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>整篇教程不长，一小时之内就能读完，然后就能够对平时经常用到的绝大部分功能有一个大概的认识。如果想要熟练掌握，还是要勤加练习，并且强迫自己用不同的方式实现某一功能。</p>
<p>该教程是随Vim一块安装的，打开方式很简单，只需在终端敲入<code>vimtutor</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ vimtutor
</code></pre></td></tr></table>
</div>
</div><p>如果想打开中文版（对，居然自带中文版😃），可以使用<code>vimtutor zh_cn</code>命令。
当然，该文档也可以从Vim中打开，在<code>normal</code>模式敲入：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="nx">e</span> $<span class="nx">VIMRUNTIME</span><span class="sr">/vim/</span><span class="nx">tutor</span>/<span class="nx">tutor</span>.<span class="nx">zh_cn</span>.<span class="nx">utf</span><span class="m">-8</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>不过还是推荐使用<code>vimtutor</code>进行打开，因为在使用该命令时，<code>Vim</code>会自动把原文档复制一份成临时文件然后打开。因此，对通过该方式打开的文档进行操作不会改变原文档。这样使用者就可以放心操作了。</p>
<h3 id="其他入门教程">其他入门教程</h3>
<p><a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="noopener noreferrer">《简明Vim练级攻略》</a></p>
<p>这是一篇11年的教程，虽然时间稍早，但是排版易读，语言诙谐，并且加入了很多图片和动图，对读者比较友好。目前该文已有超多120万的阅读量👍。
这篇教程整体内容跟Vimtutor差不多，可以看成是Vimtutor的补充，读完Vimtutor之后可以读下这篇，跟着操作一遍，可以起到复习的效果。</p>
<p><a href="https://www.bookstack.cn/read/learn-vim/README.md" target="_blank" rel="noopener noreferrer">《Vim实操教程》</a></p>
<p>文如其名，这同样是一份注重实际操作的教程，整体内容也跟上两个文档差不多，可以作为补充一块阅读。
该教程的优点是排版较好，有着类似于书籍的章节排版，逻辑清晰。而且相对上两篇而言，比较新一些，同时有一些关于插件的简单介绍。</p>
<p><a href="https://liuzhijun.iteye.com/category/270228" target="_blank" rel="noopener noreferrer">《每日一vim》</a></p>
<p>这是一个教程系列，共计30篇，每篇介绍一个功能，篇幅较短，阅读的时候不会有心里负担，当然对于功能的介绍也是浅尝辄止，读者可以根据需要有选择性的阅读。</p>
<h3 id="高级进阶vim从入门到精通vim-galore-zh_cnhttpsgithubcomwsdjegvim-galore-zh_cn">高级进阶：<a href="https://github.com/wsdjeg/vim-galore-zh_cn" target="_blank" rel="noopener noreferrer">Vim从入门到精通（vim-galore-zh_cn）</a></h3>
<p>当搜索Vim的学习教程时，很多人都推荐《Vim galore》，这篇文章就是其中文翻译。虽然中文翻译有点俗套的编程语言教程内味，但是并不影响这是一篇很好的Vim教程。</p>
<p>该仓库下就链接了其他语言的版本，英文好的可以读英文原版，不太好的可以读中文，并且该教程还有日语、西班牙语和俄语选项，都是开源社区贡献的，这也从侧面印证了该教程的牛x。</p>
<p>相对于上面所提到的入门教程，该文章提供了更加深入的介绍，但同时也不那么容易阅读，需要反复咀嚼才能将其学透。
我在第一次看该教程的时候，已经读了上面那些教程，并且有了一段时间的Vim使用经验，但是还是有很多地方读不懂和不理解。后来慢慢的对于里面的内容有了认识（比如那么多的寄存器），但是还是有些不太懂。
所以建议初学者可以先不要读此教程，待有了一定的基础之后再来阅读，当然该教程也需要反复复习。越是经典的教程越是值得我们反复咀嚼，并且每次阅读都会有新的收获。</p>
<h3 id="高级进阶vim学习笔记httpsyyq123githubiolearn-vim">高级进阶：<a href="https://yyq123.github.io/learn-vim/" target="_blank" rel="noopener noreferrer">《Vim学习笔记》</a></h3>
<p>这是一个颇为低调的学习笔记，如果不是偶然看到，可能很难搜索到该教程，该教程所对应的github博客主页甚至都是空白的。据作者称，这是他从一本书整理而来。
经过简单浏览我发现这本书还是不错的，介绍深入浅出，不会只简单介绍基本操作，而是对Vim有较为高级的介绍。
博客内容很丰富，感觉有时间可以学习学习。</p>
<h2 id="插件">插件</h2>
<h3 id="配置教程">配置教程</h3>
<ul>
<li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="noopener noreferrer">《所需即所获：像 IDE 一样使用 vim》</a></li>
</ul>
<p>这是我阅读的第一篇关于Vim插件配置的文章，主要是我在搜索关于Vim配置的文章的时候，这篇文章高居搜索引擎榜首。虽然已经五年没有更新了，但仍然在github上有9k Star。
这是我读到并且跟着操作的第一篇关于插件配置的博客，该博客涉及的内容很多，以至于很难短时间内搞明白所有的内容，事实上我到现在还搞不明白有些插件的用处。因此需要在实际操作中逐渐摸索。
因为时间原因，文中有些插件早已经被开发者放弃或者被其他的插件所代替。因为不同的人需求也不尽相同，所以有很多文中列举的插件其他使用者可能会觉得根本没有必要。</p>
<p>考虑到以上原因，我采用的方法是首先将所有的配置文件直接拷贝下来，然后逐渐学习和摸索每个插件的用处，然后增删改查，最后打造属于自己的配置。
直接使用现成配置的好处是增加学习过程中的收获感，因为配置完成之后直接就可以看到最终的效果，虽然这个阶段对每一个功能都一脸茫然，但是仍然可以增加自己的成就感。而如果从头开始摸索的话，则可能因为工作量太大并且久久看不到自己想要的效果而丧失学习乐趣。</p>
<p>逐渐摸索下来之后便可对插件进行逐一学习和探索，并且你会逐渐发现这项工作深不见底。因为从对已有插件简单的使用到掌握复杂的配置已经是一个颇为困难的过程，更不用说你甚至可以直接写自己所需的插件。真是学海无涯啊~</p>
<p>这里同样推荐一些成熟配置以供参考，当然关于Vim的配置在网上一搜一大堆，在github的topics中也能找到很多高star<a href="https://github.com/topics/vimrc" target="_blank" rel="noopener noreferrer">仓库</a>，以下是摘录的几个：</p>
<ul>
<li><a href="https://spacevim.org/" target="_blank" rel="noopener noreferrer">SpaceVim</a></li>
</ul>
<p>该项目也许是最有名的Vim配置，在github的<code>vimrc</code>话题中高居榜首，其甚至有<a href="https://spacevim.org/cn/" target="_blank" rel="noopener noreferrer">中文文档</a>（后来才知道该项目原来就是由国人发起的👍）。官网称自己为Vim发布（Vim distribution），感觉就像BSD是作为Linux操作系统的一个发布一样。该发布非常成熟，当然也比较复杂。
我没用过，但是感觉入门成本应该比较低，按照成熟的官方文档进行配置应该没啥问题。因此该配置对于想直接使用Vim配置完全体的用户来说比较友好。</p>
<p>但是我本人没有用该配置的原因也是如此，该配置太成熟和复杂了，以至于很难入手去学习。对我自己而言，一个简易配置，并且容易上手鼓捣的版本才比较适合我。
因为这样可以很好的折中使用体验和入门成本，这也是我选择上述文章学习的原因。</p>
<p>另外要说的一点，当自己逐渐熟悉Vim的配置流程之后，会发现SpaceVim的源码是一个很好的学习材料。</p>
<ul>
<li><a href="https://github.com/wklken/k-vim" target="_blank" rel="noopener noreferrer">k-vim</a></li>
</ul>
<p>该配置在github上也有高star，并且作者是国人。该配置的说明文档不是特别详细，但是问题不大，因为该配置并不是特别复杂，并且在配置文件中有很好的注释。虽然感觉项目稍老，而且开发也不是特别活跃，但是是一个很好的入门和学习素材。</p>
<p>另外作者还开发了一个简化版的<a href="https://github.com/wklken/vim-for-server" target="_blank" rel="noopener noreferrer">vim-for-server</a>版本，用于不太方便安装插件的场景，对我很有启发，我决定也要搞这么一个东西。</p>
<ul>
<li><a href="https://github.com/xinyu-yang/myvim" target="_blank" rel="noopener noreferrer">myvim</a></li>
</ul>
<p>最后允许我厚颜无耻的放上我自己的Vim配置，这是我自己摸索的一个配置，虽然简单，但是暂时够用，同时我也会不断的摸索和完善该配置。</p>
<p>在某博客上读到一句话，感觉比较赞同，大概意思是<strong>应该将Vim打造成适合自己的方式，而不是自己去适应已有的配置</strong>。这也可能也是大多数人一直乐此不疲折腾的原因吧。
所以以上参考都只是参考和学习资料，毕竟什么配置最合适只有自己知道。</p>
<h3 id="插件推荐">插件推荐</h3>
<p>关于插件的推荐，网上同样有很多相关的教程。同时，也可以经常看<a href="https://vimawesome.com/" target="_blank" rel="noopener noreferrer">vimawesome 网站</a>。这个网站有很多流行的插件推荐，可以根据自己的需要进行摸索，
这里我根据自己的使用情况介绍几个个人感觉比较重要的：</p>
<p>我认为首先需要做的是一些美化工作，这包括找一个合适的主题，还有漂亮的状态显示工具。
当然，在最开始之前，最好安装一个插件管理程序，以便于管理。</p>
<p>关于这方面的插件有几个不错的，其中包括<code>Vundle</code>, <code>vim-plug</code>, <code>dein</code>。这几个插件的评分都挺高的，而且功能也相近。</p>
<p>其中<a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener noreferrer">Vundle</a>是一个比较老的插件，同时可能也是最流行的一个。
目前对我来说，该插件完全够用。因为我只是需要一个能自动安装插件的这么一个管理器，而且我平时用的插件也不算多，所以对性能等要求也不算特别高。</p>
<p>但遗憾的是<code>Vundle</code>插件似乎已经停止开发了，但是其他的两个插件仍处在活跃开发中。其中<a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener noreferrer">vim-plug</a>是我看到的被推荐次数最多的替代品，安装该插件只需要下载一个名为<code>plug.vim</code>的文件。该插件支持一些新的功能，比如可以指定版本和标签，以及设置插件加载的时间。</p>
<p>也许等我安装的插件比较多，需要这么一个懒加载插件管理器来提升速度，或者想要尝试一下新的功能的时候，我会试着学习下该插件，但目前似乎还不是时候。</p>
<p><code>dein</code>的功能不是特别了解，但感觉应该会跟<code>vim-plug</code>差不多。这三个插件选择一个即可。</p>
<p>另外，本人最近又读到了一些文章，提倡尽量简化配置，尽量多用vim自带的功能来代替那些可有可无的插件，即 <strong>“如非必要，勿增实体”</strong> 。而据说<code>vim 8.0</code>之后的版本自带插件的管理功能，关于这点，留待以后学习研究。目前还是用些易用的管理插件比较好，这同样也是基于折腾成本与获得感的考虑。</p>
<p><figure><a class="lightgallery" href="https://i.loli.net/2021/11/22/wNt5PvpkadhErHq.png" title="vim screenshot" data-thumbnail="https://i.loli.net/2021/11/22/wNt5PvpkadhErHq.png" data-sub-html="<h2>Vim 截图</h2><p>vim screenshot</p>">
        
    </a><figcaption class="image-caption">Vim 截图</figcaption>
    </figure></p>
<p>下面开始推荐我认为有必要安装的插件：</p>
<ul>
<li><code>gruvbox</code>主题</li>
</ul>
<p>对于一个编辑器来说，好用自然是第一要素，但是颜值也是不可或缺的重要因素。漂亮的界面让人看起来心情愉悦，只有这样才能写出好的程序（或者任何东西）。
关于颜值，那么就不得不说主题了，一个主题相当于一个人的穿着，决定着整体形象。</p>
<p>我选择了比较流行，但更重要的是自己比较喜欢的<a href="https://github.com/morhetz/gruvbox" target="_blank" rel="noopener noreferrer">gruvbox</a>主题。我感觉该主题看起来比较舒服，而这个结论是我经过多个主题的实际安装对比得出来的，可能会有其他更漂亮和科学的主题，但是目前我选择了这个我已经比较满意的。
该主题的整体配色如上图所示。</p>
<p>同时我建议大家在选择自己的主题之前，一定要自己多多对比，然后选择自己看起来比较舒服的主题。这个就像买衣服一样，合不合适只有自己知道。（发现上面举得穿着的例子还挺合适😂）</p>
<ul>
<li><code>vim-airline</code>状态栏</li>
</ul>
<p>如果说主题是编辑器的穿着的话，那么<a href="https://github.com/vim-airline/vim-airline" target="_blank" rel="noopener noreferrer">vim-airline</a>就像是装饰品，可以起到画龙点睛的作用。
即使不从美观角度来考虑，通过将自己经常需要敲命令查看的东西放在我们易于看到的地方，也会给效率带来巨大的提升。
而该插件可能就是目前这方面做的最好的一个。</p>
<p>该插件目前仍然在不断开发和维护当中，该插件不仅提供底部状态栏（上图 A2 部分），而且还有顶部标签栏（上图 A1 部分所示），并且提供了很多选项供使用者进行配置。当然，对于不需要深度定制的用户，简单使用默认配置即可。我就曾经在这个插件上花了很长的时间，几乎阅读了所有的文档。当最终结果还是很好的，正是有了这个插件，我才真正看到了现代编辑器应该有的样子。</p>
<p>另外，主题和状态栏的兼容还是挺重要的，幸运的是目前我用的主题和该插件是兼容的。
事实上，稍微成熟些的主题一般都会选择跟该插件进行兼容，毕竟这个插件几乎是这方面的标杆。</p>
<ul>
<li><code>tagbar</code>概要</li>
</ul>
<p>该插件主要提供文件的概览，就是代码的目录，可以浏览和跳转。就像 VS Code 中的 outline 那样，当然基本上所有的 IDE 都提供类似的功能。而 Vim 中该功能就由 tagbar 来实现。但是仅靠 tagbar 还不够，还需要另外一个工具的支持，该工具就是 ctags，虽然我们在 Vim 中看不到它的体现，但是 ctags 非常重要，事实上很多插件和功能都要基于它来做。</p>
<p>关于 tagbar 我并没有过多的进行配置，直接把别人的配置拿过来，能显示就行了，研究过多花里胡哨的功能即浪费时间也没必要。</p>
<ul>
<li><code>NERDTree</code> 文件导航</li>
</ul>
<p>该插件是 vimawesome 上最流行的插件之一，github 上的 star 也很多。但是后来我感觉没啥用，更重要的是能够找到很好的替代品，所以就卸载了该插件。
该插件主要提供的功能是文件导航（参考截图区域 C ），类似于 VS CODE 等编辑器的文件导航，这几乎也是成熟编辑器或 IDE 的标配功能。
当需要打开新的文件的时候，尤其是同目录下的文件，比较简单。</p>
<ul>
<li>
<p><code>YouCompleteme</code>自动补全</p>
</li>
<li>
<p><code>UltiSnip</code>代码段补全</p>
</li>
<li>
<p><code>Ctags</code>标签生成</p>
</li>
<li>
<p><code>lf</code> 导航</p>
</li>
</ul>]]></description></item><item><title>可同步图床配置——PicGo+Gitee/Github/Gitlab+Onedrive</title><link>https://xinyu-yang.github.io/blog/2021/21-09-09_picture-bed/</link><pubDate>Thu, 09 Sep 2021 11:05:02 +0800</pubDate><author>作者</author><guid>https://xinyu-yang.github.io/blog/2021/21-09-09_picture-bed/</guid><description><![CDATA[<h2 id="介绍">介绍</h2>
<p>本文主要用来记录图床的搭建过程，在写博客的过程中不可避免的可能会用到一些图片，因此图片的保存位置就成了一个需要思考的问题，这个问题在使用博客网站 CSDN、博客园等是不存在的，因为在使用这些网站时，只需要把图片传上去就行，图片会自行保存在这些平台所提供的图床上。曾经尝试着在本博客里直接引用博客园和 CSDN 中的图片，不出意外，果然加载不出来，可能是因为这些网站在处理请求的时候会检查<code>Referer</code>字段吧，如果仅是这种检查的话似乎可以避开，但是终究不是长久之计。</p>
<p>一开始惊喜的发现有很多的免费图床网站（比如imgbb），开心的以为这个问题解决了，后来发现没那么简单。因为这些免费的图床往往有很多限制，比如上面举例说的这个imgbb，该网站一开始用着还行，可是过几天再在博客里加载图片时只能加载出缩略图了。</p>
<p>因此就又在网上搜索解决之道，经琢磨了多篇解决方案之后，决定选择可能目前最合适的方案：使用 PicGo 作为图床管理软件，Gitee、SM.MS 等作为存储平台，并且使用 Onedrive 来同步 PicGo 的配置文件和数据库（这是<code>PicGo 2.3</code>版本以来的新功能👏），以实现备份和同步。接下来将就该方案进行介绍：</p>
<h2 id="申请-gitee-账号创建仓库">申请 Gitee 账号，创建仓库</h2>
<p>因为 Gitee 是国内的网站，加载较快，另外就是还没有使用 Gitee 托管代码的打算，所以不如注册个账号专门用来托管图片，综合以上原因，最终使用了 Gitee。但是 Gitee 也有很多缺点，缺点之一就是空间太小了（这里不得不吐槽一句，本来就是模仿者，又那么小气，没有任何优势，难怪没人用啊~）。</p>
<p>如果没有 Gitee 账号的话，就去申请一个。账号申请就按照步骤来就行，没什么可说的。我申请的时候发现我在 github 上使用的 ID 居然还没被别人占用，就果断申请了该 ID，在 Github、Gitlab 和 Gitee 上做到了统一。</p>
<p>申请完账号后，登录，然后进入个人信息界面，随后点击左侧栏中的仓库空间管理，随后右上角会出现“新建仓库”的按钮。此时就可以新建仓库了，取名随意，但仓库必须得是公有的。</p>
<p>然后下一步是创建私人令牌，以保证 PicGo 可以控制该仓库。同样在个人设置界面的左侧“安全设置”栏下有一个“私人令牌”选项，找到并点击。然后点击右上角的生成新令牌，填写描述信息，然后选择权限，我只选择了前三个权限——<code>user_info, projects, pull_requests</code>。
我感觉这些应该就够了，最后点击提交，然后会生成一个 token ，暂时用记事本等保存该 token ，因为它不会再次出现。</p>
<h2 id="picgo-端配置">PicGo 端配置</h2>
<p>生成并保存完 token 之后，就可以进行 PicGo 端配置了。因为该软件不默认支持 Gitee 图床，所以只能通过安装插件来支持，在插件设置的搜索栏里搜索 gitee-uploader，然后点击安装。安装完之后点击插件图标右下角的设置按钮，找到“配置uploader-gitee”，点击之后会出现一个界面，主要会出现以下几条待填信息：</p>
<ul>
<li>repo      (就是刚才所创建的仓库，不过这里的格式是<code><sup>your id</sup>/<sub>repo name</sub></code>，前面的<code>gitee.com</code>就不要填了)</li>
<li>branch    (一般为master)</li>
<li>token     (这就是刚才所保存的token)</li>
<li>path      (文件的保存路径，可以自行设置，我的设置是“img/$customPath”)</li>
<li>customPath    (这就是path设置里的那个参数，我选的“年”)</li>
<li>customUrl (没填)</li>
</ul>
<p>到这里，差不多就配置好了，可以随便上传一张图片试试能不能用，我这里上传了一张蜗壳的照片。
下图是Gitee示例：</p>
<p><figure><a class="lightgallery" href="https://gitee.com/xinyu-yang/pic/raw/master/img/Kobe.jpg" title="测试" data-thumbnail="https://gitee.com/xinyu-yang/pic/raw/master/img/Kobe.jpg" data-sub-html="<h2>测试图片</h2><p>测试</p>">
        
    </a><figcaption class="image-caption">测试图片</figcaption>
    </figure></p>
<h2 id="onedrive同步配置">Onedrive同步配置</h2>
<p>PicGo是一个很棒的工具，但是之前有一个很大的问题就是没有办法进行不同主机之间的同步。这就导致在一台主机上上传过的图片只在该电脑保存有记录，其他电脑是找不到的。当然，这可以通过直接去图床网站上找链接，或者是在电脑之间复制PicGo的配置文件来解决。
但是这些解决方案都太麻烦了，而我又是一个比较懒的人。</p>
<p>目前最新的PicGo 2.3.0 仍然不能解决该问题(事实上让一个开源软件作者来搭建服务器并提供同步功能确实有点苛刻)，但是该版本提供了自定义配置文件路径的功能，为解决同步问题提供了可能。
我所采用的方案是将PicGo的配置文件所在的文件夹使用第三方云同步平台进行同步，这样就实现了同步功能。</p>
<p>可行的同步平台有很多，如 Onedrive、Dropbox、Google Drive、seafile (如果有的话)等。甚至 Baidu 云盘好像最近也免费提供了类似的服务“同步空间”，虽然每月只有1G的免费流量，但总比没有强。</p>
<blockquote>
<p>说到这里岔个题，我一直感觉用户对百度网盘的要求过于苛刻了，对于一样免费的产品，百度云盘是唯一一个能够为我提供2T免费存储空间的平台，这一点迄今还找不到替代者。至于很多用户一直以来报怨的下载速度慢的问题，我只想说反正都是白嫖的，还要啥自行车。从我自己的使用角度来讲，平时用百度网盘保存同步或者是备份一些不经常用的文件，如照片、打包的文档资料等，还是挺好的。</p>
</blockquote>
<p>书归正传，首先找到一个适合自己的同步工具，我使用的是 Onedrive，其同步文件夹为<code>D:\Onedrive\</code>，如果想改变 PicGo 的默认配置路径，则需要首先打开配置文件，然后加入这么一行配置信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">&#34;configPath&#34;: &#34;D:\\Onedrive\\ApplicationData\\picgo\\data.json&#34;,
  &#34;picBed&#34;: {
</code></pre></td></tr></table>
</div>
</div><p>这是我自己的配置，个人根据情况不同进行修改，另外根据官方建议，可以手动将<code>data.json, pigco.db</code>文件复制到自己的自定义文件夹内。</p>
<h2 id="总结">总结</h2>
<p>到这里就完成了配置和自动同步配置，当然也可以添加一些其他的免费图床<code>SM.MS, Superbed</code>等图床作为备份，我也确实是这么做的。</p>
<p>最后不得不说一下，感觉 PicGo 真的是开源代码的典范，自己提供一个框架和一套接口，其他人可以按照接口开发各种各样的代码。我感觉对于实用性的工具应用，这种开发方式非常合适。
功能强大，但不臃肿，用户有足够多的定制选择权。</p>]]></description></item><item><title>西北游记</title><link>https://xinyu-yang.github.io/blog/2021/21-06-14_journey-to-northwest/</link><pubDate>Mon, 14 Jun 2021 19:49:23 +0800</pubDate><author>作者</author><guid>https://xinyu-yang.github.io/blog/2021/21-06-14_journey-to-northwest/</guid><description><![CDATA[<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>一路花香一路唱<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">xxx和xss自然可以称得上是&quot;花&quot;，如果我们在放音乐的时候所发出的声音姑且可以称为&quot;唱&quot;，那么这首歌便可以说是我们行程的真实写照了。
<meting-js auto="https://y.qq.com/n/yqq/song/003xa0zK2zZx9Z.html" theme="#448aff" autoplay="false"></meting-js></div>
        </div>
    </div>
<h2 id="旅途开始">旅途开始</h2>
<p>旅程将从西宁开始，也将在西宁结束，绕着青海和甘肃省的一些著名景点游览一圈，有始有终（如图一）。6月5号我们首先从北京大兴机场乘坐飞机出发前往西宁市，从学校到大兴机场打车用了一个半小时，距离颇远，但大家心情愉快，有说有笑，虽然遥远但并不觉漫长（更何况路上司机师傅还主动给我们展示了电动汽车的加速性能😏）。飞机起飞后两小时就到达了西宁曹家堡（pu）机场，计划打车先去宾馆放东西，然后去夜市逛逛，但不幸的是车堵在了一条进城的路上，耽误了不少时间，所以后面逛夜市的计划也就泡汤了。其实在飞机即将降落的时候，我们就透过窗户看到了一条堵得长长的公路，当时身处局外感叹这条路好堵的时候，怎么也没想到一小时后，自己也将会堵在这条路上，不得不感叹世事难料啊😂。走走停停中，我们一路好奇地打量着这个城市的每一个招牌，寻找属于这个城市的独特印记，最后在将近十一点的时候才到宾馆。</p>
<p>办理入住的时候，前台大姐看着我们的身份证突然说了句”我原来家在知春路”，因为出来旅行，大脑已经从工作学习状态（包括地点）转换出来，所以对于这句略显突兀的话，我们先是一愣，待反应过来”知春路“乃是北京的一处地名，便和她互认”老乡“聊了几句，她跟我们简短分享了她的一些经历和她对于北京和西宁生活节奏的体会。后来从“知春路”的插曲中得到了一些思考，也许旅行的意义就是换个新的环境，将思想暂时从紧张的学习工作中解脱出来，从而得到片刻的放松。由此得到的启示就是，旅行的时候要把学习工作的事完全抛到脑后（危）。</p>

<h2 id="祁连草原张掖丹霞">祁连草原，张掖丹霞</h2>
<p>本来应该满怀期待早起出发，不巧的是昨天我刚下飞机就看到了??邮件的回复，并且老师希望能够视频交流一下，时间定为第二天早上9:30，按照计划我们此时应该已经在路上了。这突然的变故使我措手不及，因此我把这件事跟同伴说了一下，他们纷纷肯定了这件事的重要性，并愿意更改计划，这件事使我颇为感动（希望他们能够看到😉）。经过商议，最终决定等我在宾馆开完会再出发。结果，后来的事实表明我们太低估这次会议的时长，原本以为一个小时结束的视频共持续了两个多小时，同伴们就在宾馆打了一上午牌（后来知道叫uno）。会议完之后，出于对同伴的愧疚，我提议请大家吃饭，好的那种。</p>
<p>同伴告诉我由于天气原因，成哥决定将游览路线从顺时针改成逆时针（如图一）。我们匆匆收拾行李下楼，至此第一次见到了成哥。由于原本上午计划的行程被耽误了，所以下午只能拼命赶路，只为能够在天黑之前到达张掖的七彩丹霞景区（因为不是油菜花开花的季节，所以门源花海还不存在）。前两个小时一直在走盘山公路，我小时候就比较容易晕车，虽说长大后好了很多，但是对于这种拐弯抹角的山路还是毫无招架之力。每拐一个弯就像是用棍子在胃里搅拌一下，没过多久我的胃里就翻江倒海，但好在这种路况并没有持续太久，在差不多到达祁连大草原的时候就结束了。在这期间差不多两点的时候，我们在路边的一个面馆匆匆吃了顿中午饭。当时地处高原，且天空下着小雨，又冷又饿又难受的我感到非常虚弱，就让同伴帮我随便点了碗炸酱面，幸运的是这个面吃着还不错。</p>

<p>匆匆吃完饭后，我们再次出发，后面的行程中，道路稍微平缓了一些，雨也渐渐转停。透过车窗可以看到路边山坡上的牛羊和远处的雪山，虽然当时刚下过雨的天空灰暗，几乎与远处灰白的雪山融为一体，但是我们还是被眼前这高冷神秘且纯净的雪山所震撼，在崎岖的山路上快速穿行的汽车里，我们透过车窗按下快门，尽可能记录下这些迷人的风景。此时晕车所带来的痛苦早已消失，看着眼前壮观的景色，沉浸其中，颇有一种绝处逢生之感。
在此期间，我们经过了祁连大草原，汽车从公路上飞驰而过，近处是翠绿葱郁的草原，远处是连绵不断的祁连山脉。看到这些景色，不禁遐想，当年年仅19岁的霍去病也许就是在这个山谷与匈奴骑兵短兵相接，将河西走廊纳入汉王朝的版图，为后来的丝绸之路扫清障碍。这段历史给了我无穷的想象空间，让人心驰神往。</p>

<p>将近傍晚的时候我们到达了张掖市七彩镇，著名的七彩丹霞景区就在这里。刚进景区就出现了一个小插曲，xss的手机落在了厕所，还好等赶忙回去寻找的时候碰到了一个捡到手机的好心人，总算是有惊无险。同样是天气原因，七彩丹霞虽然仍是鲜艳瑰丽，但是少了阳光的加持，因此也就失去了震撼人心的力量。虽然没能看到阳光下的霞光万丈，心里不免有些遗憾，但大自然的鬼斧神工还是让人流连忘返。</p>
<p>晚饭的时候吃了一个比较有特色的菜，食材是鸡肉和类似于小花卷一样的面食，具体菜名忘了，可能叫鸡肉炖xx之类的吧，鸡肉本身普普通通，但是那个面食还是挺不错的，就连担心吃不惯面食的xss都颇为满意。还有一个菜叫沙葱炒鸡蛋，其品相和味道都和韭菜炒鸡蛋差不多，据说沙葱是当地的一个特色野菜，感觉就是粗细如粉条的迷你版大葱。一件有趣的事就发生在这道沙葱炒鸡蛋上，准确地说是发生在盛菜的盘子上。xyy吃这道菜的时候够不着，xss就试图挪动这个盘子，结果用手轻轻一拉，盘子就从中间分开了，我们被这个突如其来的重大事故惊的目瞪口呆，待稍稍回过神来，就开始讨论这个奇迹发生的原因，主要进行了如下猜测：</p>
<ol>
<li>xss在扯盘子的时候使用内力震碎了盘子。</li>
<li>盘子盛上热菜以后，由于热胀冷缩或者量子力学等物理原因断开了。</li>
<li>服务员放盘子的时候力气稍大，再加上盘子本身质量的问题，所以就碎了。</li>
</ol>
<p>我本人比较赞同第三种可能，考虑到我们所处的真实世界与武侠世界有较大区别，首先排除第一条，其次我们猜想如果盘子自己裂开应该会发出声音，而且我也想不出合理的物理解释，所以暂且把第二条也排除，最后就只剩下第三条。</p>
<h2 id="嘉峪关城一瞥敦煌沙丘四顾">嘉峪关城一瞥，敦煌沙丘四顾</h2>
<p>早起赶路，匆匆赶了半天，终于到达了酒泉市，我们在途中某川菜馆吃了顿午饭，吃饭之余，我们还关注了一下上午刚结束的高考语文作文题目，并就此引出了一段对高考语文的讨论，主题无非还是对高考刻板套路的嘲讽，以此体现自己作为曾经亲历者的优越感，就像一个久经沙场的老兵谈论自己参加过的某个战役。最后的讨论在xxx带我们温习”我家门口有两棵树，一棵是枣树，另一棵还是枣树“的阅读理解中结束，按照这句话的格式，我们还临摹了一句我们的真实情况写照——”我们今天有两个计划，上午赶路，下午还是赶路“。</p>
<p>事情果然如计划进行，继续赶路，下午到了不远处的嘉峪关，但是成哥说里面没什么好看的，且门票价格不菲，不建议进去看。于是我们采纳了成哥的建议，在景区门口处与身后刻着”天下第一雄关——嘉峪关“的大石头合了几张影，然后跑到了景区侧面远远地眺望了一下关城就离开了，据说里面那三个城楼一样的建筑完全是后来修建的。我们在三四点左右到达瓜州，并在一个十字路口旁的一排卖瓜的店铺前稍作停留，这些店铺均为活动板房，稍显简陋，且四周看不到任何其他建筑和人家。但因为地处十字路口，所以频繁有大小车辆经过，且方便停留，不一会就有好几个旅行团的大巴车停在店铺前，并由导游带着游客下车，看来是一个典型的“屠宰场“。下车前成哥嘱咐我们进去吃瓜，但是不要买，吃完直接就走。记得刚从张掖出发的时候，成哥就告诉我们回头要带我们去一个免费吃瓜的地，吃完就走，当时我们还以为去地里偷瓜，并提醒成哥换成”跑“可能更合适。</p>
<p>瓜还不错，挺甜的，牛肉干也不错，只是不小心吃到一个辣的，害我喝了好多水。接下来继续赶路，并在四五点左右到达了敦煌。在宾馆休息了一会，大概六点多，成哥带我们去了一个沙漠露营基地，名字很有意思——”熊出漠“，这可能也是后来xss把工作小哥阿虎错叫成阿熊的原因，不过如果按照字面意思的话，熊好像指的是我们😒。</p>
<p>营地包括不限次数的滑沙和单次的沙漠摩托以及太阳落山之后的自助火锅和篝火晚会等，夏季西北部地区的落日比较晚，大概要到晚上九点多太阳才下山，因此我们还有比较充分的时间近距离地接触沙漠。因为以前从未踏足过沙漠，所以我刚到营地的时候还是感到很新鲜的，但逐渐发现在沙漠中行走是一件很困难的事情，好在xss提前买的鞋套起到了很大的作用，要不然满鞋沙子会更难受（是的，我后来体会到了😞）。我们首先玩了一下滑沙，遇到了颇为健谈且富激情的阿虎，这位老哥洗脑般的声音至今仍记忆犹新，尤其是在给xxx拍照的时候所发出的”天呐，好美啊“的感叹至今仍在我脑海里回荡（一部分原因是我非常同意他的看法😏）。然后我们排队去坐沙漠摩托，因为该项目体验颇为刺激，所以xxx直接就放弃了该项目。虽然我心里一直抱着不能怂的信念，但随着离队头越来越近，心里还是一直犯嘀咕。坐完之后感觉跟坐过山车一样（虽然我没坐过过山车😂），不同的是沙漠摩托没有安全带之类的保障，而且感觉该项目对司机要求较高，如果技术不行，很有可能翻车。我们刚到的时候太阳大，风也大，好在随着夕阳西下，太阳慢慢变得稍微温和了些，风也渐渐平息，依托沙漠广阔壮丽而又纯净的背景，成哥颇为熟练地帮我们每人拍了好多照片。</p>

<p>太阳落山之后，我们回到了营地的宴席上，除了想一心干饭的xyy外，我们其他几个抱着好奇的心态参加了“篝火晚会”，整个过程大概就是在主持人的号召下，所有人一块挥手、蹦蹦跳跳和转圈圈，也许是因为我没有融入该氛围，所以感觉整个过程颇为尴尬。随后的“沙漠蹦迪”也差不多，且音效和灯光效果劲爆，在感到心律不齐和头昏眼花之后，我们就退出了这场”狂欢“。待我想返回宴席饱餐一顿的时候，失望地发现自助火锅的味道实在是不敢恭维，挑来选去，竟然感觉最好吃且顶事的是黄瓜，因为吃饭时间较晚且考虑到晚上还有看星星的环节，为了填饱肚子，我坚持吃下了不少黄瓜。同样吃了不少黄瓜的还有xss，但是ta居然喜欢吃煮过的。</p>
<p>草草地吃完晚饭后，大概已经晚上十点多了，此时我们准备去沙漠上看星星，临走之前我又拿了几段黄瓜边走边啃。这次往沙丘里走最大的失误就是没穿鞋套，以至于后来回去之后鞋袜里抖出好多沙子。往沙丘里稍走一段，避开营地的灯光就可以看到满天繁星，但若想长曝光把星星尽可能拍得好看，还要找一个合适的小沙沟，以避开四周各种光源。但这并不是一件容易的事，因为直到午夜也还是有沙漠摩托和拿着手电筒的行人来往经过，毫无疑问，这片区域的沙丘已经被现代化的文明侵入，没有了原本的宁静，自然也不复本来的面貌。</p>

<h2 id="举世闻名莫高窟沙漠奇绝月牙泉">举世闻名莫高窟，沙漠奇绝月牙泉</h2>
<p>终于到了莫高窟！在这次旅行的所有景点中，莫高窟是我最期待的一个，原因可能在于莫高窟的名气太大了，以至于总是能无意间从各种渠道获取莫高窟的信息，我甚至可以想象当听到有人说他不知道莫高窟的时候，我应该如何控制自己惊讶的语气来表现对他的嘲讽，即使我对莫高窟的认识也仅仅是听说过而已。</p>
<p>鲁迅曾经说过”期望越大，失望越大“，这次果然又应验了。我们大概上午十点到达莫高窟景区，首先是观看两场巨幕小电影，电影主要介绍了莫高窟的建造历史和几个重要洞窟，后来觉得这些介绍还是挺有必要的，要不然更是什么都看不懂。我以前看过一个纪录片《河西走廊》，其中有一集专门介绍莫高窟，内容形式跟那两个小电影差不多。看完小电影，我们乘坐景区的大巴车到达真正的莫高窟。莫高窟的洞窟数量很多，但是适合参观的并不多，而现在开放给游客的就更少了，只有六十四个，而景区导游只会随机的带我们参观八个洞窟，其中包括必看的由”九层楼“（98窟）、涅槃窟（158窟）和藏经洞（17窟），出于保护壁画等原因，洞窟里不允许开灯和拍照，再加上参观的人多且时间紧，所以我们只能跟随导游在昏暗拥挤的石窟里走马观花地看一看。</p>

<p>整个过程并无太多惊喜，甚至于在开头小电影里看到的雕像栩栩如生的220窟也没有参观，自然也就难免失望。后来想了一下，失望应该是必然的，原因在于莫高窟的价值体现在历史、文化和艺术的记载和传承上，而像我这样的文盲游客只图看个热闹，没有相应的文化积累和研究，自然觉得失望。并且洞窟内的壁画大多是<strong>经变图</strong>，这是中国工匠所独创的以绘画的形式来表现佛教典故的方式。因为缺乏相应的佛教知识，所以参观的时候自然对于壁画的内容一脸懵逼，依靠导游的讲解才勉强知道大概内容。如果我对里面的佛教典故都能够如数家珍，那么参观的体验可能就大不相同了。我之所以这样认为，是有一定的事实依据的，因为我曾在某个壁画的一角看到了关于唐玄奘和猴行者取景的场景，那种感觉就像是在异乡遇到了老熟人，兴奋且惊喜。</p>
<p>下午观看了一场关于敦煌的演出——《又见敦煌》，据说该节目是来敦煌必看的几样东西之一，并且曾经创下11天门票收入一个亿的记录（可能一个原因是票价确实很贵😓）。于是我们下午也满怀期待去看了该演出，该演出的形式是我以前没有见过的，我暂且把它称之为交互式舞台剧，其采用多视角表演和叙述的方式，拉近了观众与表演者的距离，表现方式独具匠心、别具一格。比如透过玻璃地板俯视表演者的一举一动，给人一种上帝视角的感觉，还有透过玻璃天花板仰视着覆盖在玻璃上的沙子被一层层拨开，仿佛亲眼见到了敦煌文物重见天日的时刻，并且不时还穿插着身着现代衣着的表演者与身着古装的表演者之间的对话，而身着现代衣着的表演者就站在我们中间，仿佛我们也能与古人对话一般，彻底打破了观众与历史人物之间的壁垒。诸多身着古装的历史人物中，对我来说印象最深的要数大诗人王维了，因为表演者走路的姿态着实让人忍俊不禁，其步伐完全称得上是“六亲不认”了。不知道王维当年走路是否真的是这样，反正我认为可能性不太大。</p>
<p>舞台剧的相当一部分内容集中到了王圆箓（lù）偷卖经书的情节，由此引发了我对王道士行为的思考，在我看来，王道士把经书卖到国外不见得是件坏事，塞翁失马焉知非福，如果当初没有送到国外，也许早就焚毁殆尽在后来的战争和动荡中。而现在经书虽然散落世界各地，但庆幸地是大部分都得到了很好的保存，只要还保存完好，就还有回来的机会。况且即使别的国家得到了很多稀世珍品，但其终究还是中国文化的一部分，而文化这种东西只能被自己遗忘，是无法被别人夺走的。</p>
<p>差不多也是当天的六点钟左右我们去了敦煌另一个著名景点——”鸣沙山月牙泉“，月牙泉是沙漠中一汪形似月亮的泉水，地方不大，但因为处在沙漠之中，所以相当惊艳。在去月牙泉之前，成哥带我们去了一家面馆吃午饭，老板非常热情，我们刚坐下就给我们端上来一盘西瓜，非常甜，据说是新疆产的。然后我们每人点了一碗面，等面上来的时候，如脸盆一样的碗着实使我大吃一惊，每个人面前放着这么一只碗，看起来十分诙谐，让人忍俊不禁。也许面馆老板早已司空见惯，淡定地看着我们这群没见过世面的人在这里一惊一乍，说笑个不停，又是合影又是摆拍。不仅是碗，碗里的面也很惊人，面条如巴掌般宽，偌大的碗里，总共只有两三根这么宽的面条，开始还担心吃不饱，结果到最后吃撑了才勉强吃完。</p>

<p>吃完饭之后，我们就去了景区，因为前一天去过沙漠露营地，该拍的照片也拍了不少，所以这次再来到鸣沙山的时候并没有太多激动和欣喜。对于这个景点我们唯一感兴趣的其实就是月牙泉了，于是我们目标明确地朝月牙泉走去。等我们到达月牙泉之后发现在近距离只能看到月牙的一角，无法看出月牙的轮廓，于是我们朝着对面的沙丘爬去，事实上这也是很多人都在做的。沙丘稍微有点高，但好在有一个木梯子铺在沙地上，踩着木梯走就跟爬山一样，虽然相对轻松很多，但是爬到山顶还是气喘吁吁。我们到达山顶的时候，太阳正在落山，于是就有了图七。太阳下山之后，我们也觉得没意思，就下山回去了。成哥最后带我们去逛了一下敦煌的夜市，据说很热闹，到了之后感觉稀松平常，无甚特别，匆匆转了一圈就结束了今天的行程。</p>
<h2 id="西出阳关天降翡翠">西出阳关，天降翡翠</h2>
<p>离开敦煌后，我们前往下一个目的地，古代中国最西边的关隘——阳关。王维的诗句”劝君更进一杯酒，西出阳关无故人“使得阳关家喻户晓，即使故阳关早已经消失在茫茫戈壁之上，后来重建的阳关还是吸引无数游客慕名前来。不由得感慨文化是如此的强大，可以贯穿古今、超越物质的存在而经久不息。不觉想起李白的诗句”古来圣贤皆寂寞，惟有饮者留其名“，本来是一句扯淡的大话，没想到一语成谶，”岑夫子“和”丹丘生“真的因为一场酒局而千古留名。相同的例子还有那个著名的唐朝农民”汪伦“，按照戴建业老师的说法”汪伦这狗东西真是走了狗屎运，就因为送了下李白，结果一千多年后，全世界都知道唐朝有个农民叫汪伦。“</p>

<p>书归正传，阳关的标志性建筑就是古阳关现存的唯一一处烽火台遗址，原来八点几米，现只存三米多了，除此之外，古阳关就再没有其他古迹留存了。烽火台四周是一望无际的戈壁，阳关烽燧孤零零的矗立在这片广袤辽阔的土地上，更显凄凉和悲壮，仿佛艰辛孤苦而又坚毅挺拔的戍边将士。图八中栈道所围就是古阳关所在地，如今已荡然无存。（来到这才知道原来”阳关道“里的阳关也是指这里）</p>
<p>阳关烽燧景点周围毫无遮蔽，酷热难耐，稍作停留我们就返程了。不禁心想，古代的阳关是否也像是今天那么炎热干燥，但即使是这样，作为古代中国的西大门，不知有多少往来商旅将阳关看作前方路途的希望。从阳关烽燧遗址出来后，我们途经一个小的射箭场，设备为传统的弓箭，我很感兴趣，而且问了下，价格实惠，就提议大家射几箭。xyy把仅有的十二块钱零钱拿了出来，一块钱一只，每人三只箭。因为我兴趣最高，所以我先来，箭靶很近，大概五米的样子，我颇为自信，感觉应该非常简单。管理大叔说用箭头瞄准黑圈的右下方，我拿起弓箭瞄了一会，手就抖得不行，松了休息一下，再次拉弓，稍微瞄了一下就放箭了，因为弓拉的还算足，所以箭“咻”的一声就出去了，我放下弓，发现靶子上空无一物，斜着往后一看，原来箭射在后面的墙上。如此三次，只有一箭勉强射在了靶子上，但是依旧没有环，我颇为沮丧，为自己的过分自信而惭愧，只好安慰自己说试的次数太少了。</p>
<p>翡翠湖是一片断断续续的盐湖，目前免费，据成哥说很快就要开始收费了。在阳光的照射下，湖水颜色清澈且碧绿如翡翠，岸边是厚厚一层白色的盐结晶，我随手拿起一小块放到嘴里尝了尝，味道齁咸，是盐无疑。见湖水颜色清澈见底，我就在湖边洗了洗刚才摸到泥巴的手，待手上的湖水干了之后，竟留下一层白色粉末，而且拍打不掉。湖边那么多结晶，湖水自然是饱和状态，自己刚才怎么就没想到呢。</p>

<p>湖水梦幻般纯净的颜色使其成为拍照的绝佳地点，湖边随处可见的是拍照和被拍的俊男靓女，还有少数是像我这种负责拿东西拎包的摄（打）影（杂）助（人）理（员）。当无事可干的时候，我就看xxx和xss拍照，但这件事有风险，因为有时候会由于笑得太大声而被驱逐。有时候我也会想一些乱七八糟问题，比如湖水为什么那么绿？青海为什么那么多盐湖？为什么有的有盐，有的没有？这些问题一般都想不出个所以然，往往最后归结为”大自然的鬼斧神工”便不了了之。</p>
<p>随着逐渐日落，再加上寒风阵阵，我很快就被冻得瑟瑟发抖，且因为衬衣外套与湖水颜色相近，有时拍照还需要脱了外套，其中辛酸不言而喻。从翡翠湖回来之后我吃到了旅途中第二好吃的东西——羊肉炕锅，据说就是把羊肉、油炸土豆片和洋葱等放一块焖一下，最后放上一些烤饼。炕锅非常美味解馋，以至于我在多天之后的某个晚上写下这些回忆的时候还能不自觉地流下口水😂。同时我感觉这顿饭比较符合我在前文说的”好的“的标准，所以我决定这顿我请，因此其他人在吃这顿”白嫖羊肉炕锅“的时候应该比我吃到的更加美味，好在后来我也体验到了这个味道，就是第二天成哥在另一家店请我们吃羊肉炕锅的时候，这就是我感觉第一好吃的东西，当然，这是后话。</p>
<h2 id="u形国道雅丹地貌日食">U形国道，雅丹地貌，日食</h2>
<p>U形国道不过是315国道上的一段上下坡，但因为其拍照效果较好，竟成了一处”网红“景点，不知道当初设计这段路的工程师会不会预料到这一点。我们到达时，路旁停了许多大大小小的汽车，而国道上多的是趁着没车的间隙走到路的中间，顶着寒风搔首弄姿的人。当然，不久我们也将成为其中的一员。但我们还算属于比较遵守交通规则的一类，如果远远地望到有车开来，便急忙躲开。另外还有一类人淡定地站在路中间，自顾自地拍照，根本不管有无汽车到来，甚至置汽车喇叭于不顾，见到此景，我们往往嗤之以鼻（虽然有五十步笑百步之嫌😂）。经过昨天翡翠湖边寒风的毒打，我们纷纷把最厚的衣服穿上，xxx不仅穿上了棉袄，头上还围了一个围巾，不过外形依旧漂亮，而且还多了一些常年在田间劳作的中国女性气质。由于我昨天被风刮的头稍微有点疼，因此今天在头上缠了一个类似于发带的东西，用以保暖，后来的事实证明此方法极为有效。</p>

<p>成哥驱车带我们前往南八仙（希望没记错）参观雅丹地貌，雅丹地貌按照我的理解，就是由于风雨等因素的侵蚀，使得土壤中比较柔软的部分逐渐消失，从而只剩下更为坚硬的部分，最终的呈现效果就是空旷的地面上伫立着一坨坨（按照xss的惯用量词）土堆，当土堆的数量很多，连成一片，放眼望去到处都是的时候，就显得颇为壮观，而当一种景色比较壮观的时候就可以用来拍照了😂，图十一中隐约可见的白色汽车即是我们这几天的交通工具，劳苦功高，应当被记录。</p>

<p>从雅丹地貌景点回来后，我们在大柴旦附近的一处淡水湖旁观看了日食，因为是日偏食，所以并不明显，但是我们借助专业的设备（四层太阳镜，虽然后来发现其实只相当于两层）还是能够清楚地看到太阳被咬掉的那一小口，图十二就是拍摄的照片。最后不得不提我们看日食的地方蚊子挺多的，但是跟明天将要遇到的相比，就算是小蚊见大蚊了。</p>

<h2 id="青海湖远眺星空">青海湖远眺，星空</h2>
<p>由于行程变成了逆向，我们最后一站才终于到达了著名的青海湖。前往青海湖的途中路过了一个淡水湖——”可鲁克湖“，与”可鲁克湖“相临的是”托素湖“，这是一条咸水湖，关于这两个湖还有一个传说，这里就不介绍了，可以自行脑部一个男女相爱，家庭反对，最后双双殉情化身湖水的故事。我们沿着“可鲁克湖”边上的公路行驶，湖的四周芦苇丛生，水鸟繁盛，景色宜人，嫣然一副江南水乡的景象，很难想象公路的另一侧就是一望无际的戈壁。我们在湖边的一个入口处停了下来，然后兴冲冲地准备跑到湖边好好欣赏一下美景，临下车前成哥提醒了一句，这里蚊子比较多。还没走到河边我们就已经见识了”蚊子比较多“是什么样的场景，这里的蚊子不管是从质还是量上都远超我的想象，个头大且多，给人的震慑力极大。xss和xxx还没走到河边就匆匆返回了车里，我跟xyy抱着一睹究竟的决心，冒着枪林弹雨跑到河边，期间全身不敢有丝毫停歇，一边手舞足蹈，一边摇头晃脑。现在回想起来，当时的状态竟像是突发癫痫的精神病患者。待我到了河边，发现蚊子的数量更多，就匆匆往回返，也许蚊群对突如其来的美味佳肴还未来的及做出反应，所以我才有机会拔腿跑回车里，侥幸留得一条小命。像这种一边拼命跑一边在身上拍打的场景，我上次经历应该还是上小学那会捅马蜂窝的时候。</p>
<blockquote>
<p>关于这个场景，我想到了李诞在吐槽大会上关于其小时候所经历的田园牧歌的场景的描述。大概意思是他小时候生活在草原，草原上蚊子又大又多，且叮咬的破坏力很大，如果上厕所的时候屁股被叮咬一口，可能连裤子都提不上，因此他在草原上露天上厕所的时候一般都是边上厕所边摇晃，长久以来养成了习惯，以至于现在上厕所不晃几下感觉方便不干净。</p>
</blockquote>
<p>从”蚊子湖“离开之后又是不停的赶路，差不多中午的时候，成哥带我们去吃了一家牦牛大骨汤，临下车还叮嘱我们点普通碗就行，不要点其他的。这家排骨汤还挺不错，肉质松软，汤味清香，而且价格公道。吃饭的时候服务员试图把肉酱推销给我们，但是我们谨记叮嘱，啥也没买😂，并且我觉得他们的”特色肉酱“味道跟我小时候自己家里腌的酱豆（豆豉）味道差不多。</p>
<p>下午我们继续赶路，在翻越橡皮山的时候，已经可以远远地望见青海湖，远处的青海湖犹如一条宽宽的蓝色丝带，横铺在天地之间，其颜色纯洁晶莹如同一块蓝宝石，震撼之余不免惊呼”哇~太美了！“。我们在青海湖边上的一块山坡的草地上停下来拍照，虽然一路上经过很多草地，但这是第一次双脚真正踏上草地，感觉果然与仅在远处观看不同。近处的草地虽不像远远观看那么洁净纯粹，但多了些真实厚重的质感。草地上随处可见的牛粪打消了xss草地打滚的想法，于是腰上还贴着膏药的xss带着无处发泄的活力，在草原上活蹦乱跳。我对草地上随处可见的洞穴充满好奇，很想知道里面住的是什么繁盛的生物。趁他们拍照的时候，我往草地深处走去，还真的看到了一个土黄色的小生物在鬼鬼祟祟、探头探脑地四处寻觅，观察片刻，我认出这应该是一只老鼠。因为距离不远，我决定飞奔过去看能不能逮到一只，但等我快跑到跟前的时候，这个小家伙迅速地选了一个洞穴，并且钻了进去，至此我可以大概断定这些四通八达的洞穴就是老鼠洞。</p>

<p>从草地上回来之后，我们继续赶路，成哥说要带我们去一个可以俯视青海湖的半山腰上，果然，在这里我们可以把青海湖近处的轮廓尽收眼底，远处湖天一色，宛如一块巨大的浅蓝色幕布。有如此美丽的景色，自然也免不了一通拍照，成哥的流水线再次启动，随着一声声”下一个“，我们一个个站到高处与身后的青海湖合影。景色太美，甚至后来成哥也忍不住让我们给他拍几张照片，其中的一张照片后来还成为了成哥的微信头像，这是后话。</p>
<p>从半山腰下来后，我们找了一家临近青海湖的宾馆，把行李放下之后，就去了青海湖边。入住的时候，宾馆老板给我们讲了一个可怕的故事，不久前五一假期的时候，从北京来的几名游客入住宾馆，但晚上又决定去青海湖边露营，宾馆老板告诉他们晚上湖边非常冷，试图阻止他们，但劝说无效，只得给他们退房。结果，当天晚上半夜的时候，几乎被冻僵的游客敲开了宾馆的大门，待老板把他们带到大厅的时候，发现他们已面色青紫，情况危险，于是急忙打通报警电话，大概三个小时之后救护车才把他们拉走抢救。如果换作其他地方，我可能会认为这是宾馆老板骗人的鬼话，目的是为了唬住那些想出去露营的人。但是经过了这几天对青海天气的切身体验，我丝毫不敢怀疑老板说话的真实性，更不用说前几天的白银马拉松事故让人们对高原气候心有余悸。</p>
<p>来到青海湖边，我照例又尝了一下湖水，像海水一样咸，据说湖里只生长了一种被称为湟鱼的鱼类（后来百度了下，其实还有其他几种小型鱼类），看着湖面上时不时飞过的海鸥，不知为什么湖里的物种不像海里那么丰富。相对于远处，青海湖边又是另外一种景色，站在湖边，视野极为开阔，目光所及皆是一片淡蓝，甚至远处天和湖之间的分割线都几不可辨，天地之辽阔，风景之纯净，令人心旷神怡。湖边有很多被精心打扮的马和牦牛，用于给游客提供拍照服务，无人光顾时，这些牲畜就被拴在木桩上，当有游客付钱，便可以骑在他们后背上溜达一圈，拍几张照片，甚至有时为了拍照效果，牵马的小贩还会把它们赶到湖边的浅水区里。不管牵着走还是拴在那，这些牲畜始终低头沉默，任劳任怨，看不出兴奋，也没有反抗，甚至没有任何多余的动作，沉默地让人心疼。想必如此循环往复，日复一日，它们也早已习惯了吧，想到这里，心里不免有些伤感。在这美丽壮观的青海湖边，看似自由的马和牛被绳索拴在了这里，看似掌握牲畜命运的小贩被生活拴在了这里，而此刻看到此情此景的我呢？</p>

<p>同伴们制定了看银河和日出的计划，大概计划是先回去睡觉，待差不多一点多的时候，到宾馆的天台上看银河，拍星轨，到差不多三点的时候再回去睡觉，然后五点半起来去青海湖边看日出。夜晚就这样被均匀地切分开了😞，听完这个计划，我只想赶快回到房间珍惜现在这来之不易的睡觉时间。在差不多一点多的时候被xyy叫醒去看银河，本来对银河还抱有些许期待，但发现这不就跟我曾在家里的某个晚上上厕所的时候无意间瞥见的一样吗，也就觉得不过如此啊。依赖于xyy强大的修图技术，最终的图片如图所示。xyy还尝试拍出星轨，但是由于相关经验的缺乏，以及对相机功能的了解不够准确，所以最终只得到了一个虚线形式的星轨图。</p>

<h2 id="青海湖日出返程">青海湖日出，返程</h2>
<p>早上看日出不出意外，又是在瑟瑟发抖中度过的。待我们到达青海湖边的时候，湖边已经有不少人了，我们一个个站在湖边像是虔诚的朝圣者，期待着旭日东升，一边瑟瑟发抖，一边目不转睛地看着东方，生怕错过了太阳升起的那个瞬间。而太阳却没有直接了当地升起来，而是犹抱琵琶半遮面，躲在了云层后面，仿佛韬光养晦一般，只待云雾散去，便一鸣惊人。事实也确实如此，当太阳从云层后面出来后，就几乎无法直视了。因此总的来看，这次看日出并不算特别成功。不过此时我早已坚持不住，疲倦加寒冷使我对日出漂不漂亮提不起更多的兴趣，目不转睛地看着太阳是因为实在没事干，并且不想辜负自己所付出早起的艰辛，才尽可能地多看几眼，仿佛这样盯得头晕眼花能够更加划算。</p>

<p>路上经过了一些藏民居住区，成哥带我们去藏民家里品尝原汁原味的牦牛酸奶，味道<strong>酸</strong>爽可口（皱眉表情），但是为了能够珍惜这次品尝的机会，我坚持没有加糖。藏民小姐姐还主动提出可以把自己的藏族衣服借给xxx和xss来拍照，肉眼可见ta俩两眼放光，迫不及待地回答说“可（太）以（好）吗（了）”。藏民小姐姐转身拿衣服，并颇为客气的说“希望你们不要嫌弃”，从俩人跃跃欲试的反应来看，“不嫌弃，不嫌弃”必然是发自内心的回答。于是我们有了此次旅程最后一组照片，且是为数不多的成哥和我们的合照。</p>
<p>在回西宁的路上路过了宗喀拉泽，据说是经过某某机构认证的最大的拉泽（据说意为殿堂）。成哥说这个景点不要票，结果我们找了半天没看到入口，于是找到路边一个卖”特产“的人问路。也许那大哥”特产“卖的不顺利，所以颇为不爽地指着自己的嘴跟我们说”鼻子底下是张嘴，找不到路，你们不会找人问吗？“，我们被这位大哥义正言辞的回答给镇住了，竟一时语塞。只是事后我还是没想明白我们找它问路这件事为什么不符合它说的”找人问路“。</p>
<p>等到我们终于问到了路才知道，原来这个景区需要买票，票价30，听闻票价我们扭头便走，但卖票的大姐马上叫住我们，问我们是不是学生，得到肯定的回答后，她告诉我们学生票可以半价，不过从她的反应来看，我们是不是真的学生她也并不在意，只不过是想找一个合理而又体面的理由留住这几个来之不易的顾客罢了，所以我们连学生证都没拿，她就认可了我们的学生身份。后来我就在想，如果我们说不是学生，她会不会告诉我们身份证也可以半价😏。当然，这都是猜想，没有证据，不能凭空诬陷别人，但后面遇到的大师则是有真凭实据的。待我们买完”学生票“之后，就进入到景区，卖票大姐煞有其事地给我们每个人献上了一个黄布条，据说叫哈达。我心想花15块钱搞一条黄布条也行啊，虽说对我来说啥用没有，还没等我高兴完，她说这不是给我们的，是让我们贡献给山神的。当时心想，好家伙（学自xss）还有这一手，但后来的事实表明，我还是小瞧他们了，这只是下一个套路的开始。所以后来回想起来，感觉像是花15块钱买了个套路套餐。</p>

<p>书归正传，可能是因为所谓的景区几乎没有什么人，所以我们进入景区刚走上阶梯就有一个“导游”在此等候。大概意思是她会带我们完成游览，整个过程颇像商店的导购（此处伏笔）。她带我们煞有介事地拜完四臂菩萨之后，就把我们领到了菩萨像后面的大师处贡献哈达。</p>
<p>刚还在打盹的诵经大师看见有<del>顾</del>游客过来，立马打了个哈欠提了提神，然后开始念念有词（此处没有任何不敬）。导游告诉我们这位大师正在为我们诵经祈福，然后说会逐个带我们去另外的祈福大师那里贡献哈达。因为我是最后一个，看同伴一个个被带走，百无聊赖，就开始东张西望。导游看到之后走过来告诉我说你不用着急，你在这里虽然等待的时间长一点，但是接受大师祈福的时间也更长，得到的福祉也就更多一些。听闻此话，原本已经又开始打盹的诵经大师又开始“咪咪嘛哞”念了起来，我告诉导游我不着急，就是四周看看。</p>
<p>然后很快就到我了，我被带到祈福大师那里，大师请我坐下，我颇为虔诚地端坐在凳子上，大师首先问我年龄、学历、职业等信息，我做了一一回答并且确信这只是祈福所需的必要信息，而不是用来确认我的经济状况。然后大师就开始了一段语重心长、循循善诱的教导，大概意思是我是高学历人群，具有更大的能力，能力越大责任也就越大，应该多承担一些社会责任，多利用自己所学的知识做利国利民的事情，并且要活到老学到老等等。虽然是说教式的老生常谈，但是面对长辈的发自内心、感人肺腑的教导我是不敢表现出一丝不敬的，因此频频点头并附带着“是”，“是的”，“好的”等简短而表明态度的回答。这样的过程大概持续了两分钟，也许大师感觉时机已经差不多成熟（或者是因为没啥可说的了），然后话锋一转“今日你与山神有缘，可以向山神敬献佛灯以祈求保佑，但是事先说好，佛灯需要一定的花费，有100、200&hellip;&hellip;不等”。待他说到“有缘”这个词的时候，我便预感到可能有事情要发生，并开始组织语言，力求让他明白我是如何地真心不希望麻烦山神。他开始报价格的时候，我就打断了他，诚恳地跟他表示我作为一个在校生，还没参加工作，家里情况又不好，能力实在有限等等。当时甚至还想把我认为这种花钱卖灯的行为有可能亵渎神灵的观点告诉他，但是考虑到这样可能会被打，所以就没说。事实上大师也没给我机会说，待他大概确定我并不想祈福之后，直接左手一挥“好，那缘分尽了，请这边走”，我只得悻悻离开。</p>
<p>事后我对这段并不愉快的交流深表遗憾，他们作为能将想法直达山神的大人物，得罪他们岂不等于得罪山神，想到这里不觉心中惊恐万分。后来问同伴，他们也都有类似的经过，因此心里也就稍稍释然了些。最后为了防止别有用心的人乱作揣摩，我觉得有必要进行说明，我没有任何亵渎或者不尊敬神明和宗喀拉泽大师们的意思。</p>
<p>最后再次到达西宁，临走之前想去尝一尝成哥安利的水煮羊肉，但是无奈逛了好几家都没有开门，成哥说是现在时间太早，因为这些店一般都是晚上开张。于是，我们就略带遗憾地提前去了机场，不过略有遗憾也不是坏事，有遗憾才有下次再来的理由嘛。机场跟成哥离别的时侯，我准备效仿武侠人物，抱拳说句“青山不改，绿水长流，咱们后会有期”，但是感觉颇为中二，所以就只保留了台词部分。想到回学校之后，也很快就要收拾东西走人了，伤感加倍，看来六月是离别的季节呀，也许正是知道分离时的悲伤，才更应珍惜相处时的不易。</p>
<h2 id="总结">总结</h2>
<p>最后总结，因为xxx和xss在拍照方面做了充足的准备（我后来才明白拍照是主要目的），因此我也就蹭了很多照片，这几天拍的照片甚至比我在这之前拍的总照片还要多。去机场的路上，我们从发朋友圈的话题说到了写攻略的事，我再一次大言不惭（最近的一次是扎辫子）地说我要写篇游记，因为感觉旅游攻略就是简单的罗列，水平太低。但是后来发现自己文学水平的确不行，写着写着还是变成了简单的罗列，不得不再次感慨，原来没有不行的题材，只有不行的人呀😄。</p>
<p>其实本来就有写几篇日记把旅行记录下来的打算，因为反正日记只有自己看，所以打算随便写写。但是后来吹了牛，就不得不好好写了，但没想到越写越多，而且很难写到自己觉得还算满意，除了需要仔细回想重要经历之外，还要反复修改，很是不容易。现在仍然能回想起当时说写游记的时候，成哥突然转过头并投来期许的目光，并很快把微信二维码发给我，让我附在游记后面，当时就意识到自己挖的这个坑不得不好好填了😂。后来同伴也对游记怀有很大的期望，并给予很多支持（有事实根据，微信秒回提供图片）。但是自己能力实在有限，如果效果不尽如人意，还请多多担待～</p>
<p>回想这一路，绝大部分时间都待在车里，因为担心会晕车，所以我不敢长时间看手机（以至于剧本杀也不敢玩），因此只好找一个不需要看手机的方式来打发时间。车内有蓝牙音响，且成哥喜欢播放音乐，因此我就提出用我的手机连接蓝牙放歌，所以随后的几天，我基本掌握了车里的点歌权。有时大家一块唱，便用我的手机轮流点歌，但我点的居多，且大部分时间都是我自己在点，几天过后，我的歌单几乎播放了一遍，导致大家对我的音乐爱好有了确切的掌握。因为一路上戈壁居多，且考虑到前有“沙漠蹦迪”，那么且将这个过程称为“戈壁KTV”吧。因为开头写唱歌，最后就也以此结尾吧，首尾呼应一下。差点忘了，最后得感谢<a href="https://github.com/lyswhut/lx-music-mobile" target="_blank" rel="noopener noreferrer">洛雪音乐移动端</a>提供海量无版权音乐，另外洛雪音乐还有桌面版可供使用，开源免费，简洁轻量，真的是居家旅行必备之音乐播放器。</p>
<p>最后是成哥的微信二维码（头像更换之前）：</p>

<p><em>2021年6月5日——6月12日 青甘大环线 一路花香一路唱</em></p>]]></description></item><item><title>AES算法详解</title><link>https://xinyu-yang.github.io/blog/2021/00-00-01_aes/</link><pubDate>Sat, 05 Jun 2021 11:19:13 +0800</pubDate><author>作者</author><guid>https://xinyu-yang.github.io/blog/2021/00-00-01_aes/</guid><description><![CDATA[<h2 id="概述">概述</h2>
<p>原本想把自己AES加密算法的整个实现过程给详细复述下来，分享给想学习的同学，也方便自己复习，但后来发现该工作量太大，加上作业太多没有过多的时间去写。所以就想把自己在学习的过程中多遇到的好的文章进行汇总，避免重复性的工作，因为我感觉有的文章的介绍和配图写的非常好，再次重复也没有意义。本文里我会将文章的链接附上，如有侵权，敬请告知！</p>
<p>因为最近要完成课程作业，实现AES128加解密，本以为就是一个简单的算法实现，后来发现AES加密的每一步都挺难，而且都涉及到我没听过的概念，所以最近看了很多帖子、资料。最终终于能够解决这个问题。关于AES算法的介绍，网上有很多的帖子，所以我就不进行赘述了，我只是希望将我遇到的一些比较难以理解的点进行详细的叙述。</p>
<p>实现AES算法主要包括以下学习步骤：</p>
<ul>
<li>GF（2^8）域上的多项式运算</li>
<li>扩展的欧几里德算法</li>
<li>生成S盒</li>
<li>生成逆S盒</li>
<li>S盒置换</li>
<li>行移位</li>
<li>列混合</li>
<li>生成秘钥</li>
<li>循环加密</li>
</ul>
<p>其中1、2、3、4步都跟S盒生成有关，根据我所看的一些博客，S盒的生成涉及到数论的基础知识。如果没有基础的话，1、2是要专门去学习的，我在这两步上花费了很多时间。但是在网上也可以找到很多AES算法，他们用的是现成的S盒，没有前4步，直接用现成的S盒置换，这样相对会容易一些。但是本着刨根问底和多学习知识的原则，我还是去学习了S盒的生成方式。第5步就是将每一个字符进行查表替换，没有什么难以理解的地方，所以相对而言比较容易。第6步应该是整个过程当中最简单的一步了，就是进行一个循环移位。第7步列混合涉及到矩阵和多项式的乘法，所以还是有一定难度。。。</p>
<p>如果想从整体上了解AES加密的完整过程，那么下面几篇文章不管从叙述还是插图上来看都是很不错的，几篇文章介绍的方式不同，但是原理都是一样的，对比结合着看会更有帮助：</p>
<p><a href="https://www.cnblogs.com/block2016/p/5596676.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/block2016/p/5596676.html</a></p>
<p><a href="https://blog.csdn.net/u012721519/article/details/79612128" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u012721519/article/details/79612128</a></p>
<p><a href="https://www.cnblogs.com/luop/p/4334160.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/luop/p/4334160.html</a></p>
<p><a href="http://www.alonemonkey.com/2016/05/25/aes-and-des/" target="_blank" rel="noopener noreferrer">http://www.alonemonkey.com/2016/05/25/aes-and-des/</a></p>
<p>但是仅从这几篇文章来看的话，对于像我这样的小白而言还是没有办法实现的，因为各个步骤介绍的并不具体，尤其是对于缺少基本数学知识学习的同学很难理解。所以这几篇文章可以作为整体进度的把控，接下来看怎么一步步学习实现。</p>
<h2 id="s盒">S盒</h2>
<p>我在学习这个算法的时候，在S盒的生成及置换上花费的时间是最多的。可能是因为基础较差，所以需要学习的东西比较多，所以我将这一部分进行了逐项的划分。关于S盒的生成及置换，这篇博客进行了非常详细的介绍，但是有一些东西我还是没明白，所以又参考了很多其他文章，才把这一部分搞明白。建议初学者以这篇博客为基础进行学习：</p>
<p><a href="https://blog.csdn.net/u011516178/article/details/81221646" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u011516178/article/details/81221646</a></p>
<p>下面进行分步的介绍。</p>
<h3 id="gf28域上的多项式计算">GF(2^8)域上的多项式计算</h3>
<p>因为整个过程很多，所以我决定分为多个文章分别进行叙述，首先是GF（2^8）域上的多项式计算，因为以前也没有学过相关知识，很多概念都是第一次见到，所以这部分花了很长时间去学习。在学习这个之前，我们需要知道为什么去学习这个东西，AES加密中的哪一步用到了该知识点呢？</p>
<p>S盒的置换就是将0~2^8中的任意一个字节置换为另外一个，置换的原则是将该元素置换为在GF（2^8）域上的乘法逆元，什么是GF（2^8）域？什么又是逆元呢？这些定义的准确数学描述我不太懂，根据本次应用，我可以给出粗略说明，GF（2^8）有限域大概就是指定义在该域中的数值经过定义在该域上的函数运算，其结果也都在该域内， 借用网上的一个例子进行说明：</p>
<figure>    <figcaption>  
<h4>图一：GF(7)运算</h4>   </figcaption> </figure>
<p>那什么又是乘法逆元呢，形如：</p>
<p>$$(a\cdot a_{-1} ) \% p=1$$</p>
<p>其中p为有限域的范围，这里按理说应该为2^8，但是却不能取这个数，因为2^8并不与其内的每一个数互质，所以只能选一个更大的质数（具体原因请参考扩展的欧几里德算法），AES算法中p的值选的是0x11B, 我也不知道为什么，可能是约定俗成的吧，因为如果想找一个稍微比255大的质数，不知道为什么要取283（0x11B）<em>[我后来才明白，这部分大概涉及到<strong>不可约多项式</strong>等概念，关于这一点我将会后续进行学习和补充。]</em>。a 为有限域内的整数，那么 a_{-1} 即为 a 在有限域上的逆元。至此，我们知道逆元是什么，但是具体怎么去求解还不太清楚，这一部分请参照扩展的欧几里德算法。（更新）后来为了加深学习，我又自己写了篇博客。</p>
<p>我接下来继续说GF（2^8）域上的多项式运算，因为把基本的运算搞清楚是计算GF（2^8）域上乘法逆元的前提，该域上的加减乘除运算是与传统的运算所不同的，具体的多项式运算请参考GF（2^8）域上的多项式运算。当然，也可以先学习扩展的欧几里德算法，然后再学习该部分，实现的时候将欧几里德算法中的四则运算换成GF（2^8）域上的多项式运算就行了。关于GF（2^8）域的计算介绍参考以下几篇博客介绍：</p>
<p><a href="https://blog.csdn.net/luotuo44/article/details/41645597" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/luotuo44/article/details/41645597</a></p>
<p><a href="https://blog.csdn.net/shelldon/article/details/54729687" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/shelldon/article/details/54729687</a></p>
<p><a href="http://abcdxyzk.github.io/blog/2018/04/16/isal-erase-3/" target="_blank" rel="noopener noreferrer">http://abcdxyzk.github.io/blog/2018/04/16/isal-erase-3/</a></p>
<p>在四则运算中，加减运算就是简单的异或运算，很简单。而乘除运算则是以乘法运算为基础，所以四则运算中最主要的是理解乘法的运算，这篇https://blog.csdn.net/bupt073114/article/details/27382533文章详细介绍了乘法运算，以及其实现。</p>
<h3 id="扩展的欧几里得算法">扩展的欧几里得算法</h3>
<p>待掌握了GF（2^8）域的运算知识后，应该去学一下拓展的欧几里得算法，对于该算法，上面所给出的关于S盒生成的综述博文里已经参考相关教材进行了非常详细的论述，所以关于这部分知识可以同样参考这篇博文（参考文献10），</p>
<p>还可以参考<a href="../euclid" rel="">这篇博客</a>
如果还不明白，也可以自行查找其他关于拓展欧几里得算法的介绍。</p>
<h3 id="s盒生成及置换">S盒生成及置换</h3>
<p>关于S盒的生成及置换，同样参考文献10，该文章已经进行了非常详尽的描述与代码实现。待自己完成后也可以参考博客中的结果进行检验。</p>
<h2 id="行移位">行移位</h2>
<p>行移位就是对每行数据进行相应的循环移位，没有难以理解的地方，应该是整个加密过程最简单的部分，关于移位的规则，可以参考文献1、2、3、4，均有详细的图示介绍。下图来源于文献4：</p>

<h2 id="列混合">列混合</h2>
<p>列混合就是将数据矩阵乘上一个矩阵，解密的时候乘上原矩阵的逆矩阵进行解密，秩序要按照步骤一步步来即可，同样没有难以理解的地方，按照参考文献1、2、3、4的介绍进行操作就没有问题。关于列混合还可以参照这篇专门介绍的文章[11]，其对于列混合又专门的介绍与实现，而且还有检验数据。下图参照文献4中图片：</p>

<h2 id="密钥生成">密钥生成</h2>
<p>密钥的生成过程稍微有些麻烦，需要仔细参考规则，避免搞错，但是只需要理解操作规则即可，不需要理论理解，还好参考文献3、4中都有非常生动的图示。下图来源于文献4：</p>

<h2 id="循环加密">循环加密</h2>
<p>循环加密就是对上述过程重复进行若干次。具体实现参照文献1、2、3、4。</p>
<h2 id="解密">解密</h2>
<p>解密过程就是将上述的过程反过来执行一遍，原本置换的就置换过来；原本移位的就反向移过来；原本乘上矩阵的就乘上她的逆矩阵。。。上面关于每个加密过程的参考文献都有相应的解密过程。</p>
<h2 id="实现">实现</h2>
<p>关于AES128的加密完整实现，可以参照代码 <a href="https://github.com/xinyu-yang/AES128-CBC" target="_blank" rel="noopener noreferrer">https://github.com/xinyu-yang/AES128-CBC</a>，此代码的实现几乎都是参照上文的介绍，唯一不同的是在加密的时候采用了CBC模式，具体什么是CBC加密模式，如果不清楚的可以自行百度。如果有时间我也会把这部分补全。</p>
<h2 id="参考文献">参考文献：</h2>
<ol>
<li>
<p><a href="https://blog.csdn.net/zhjchengfeng5/article/details/7786595" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/zhjchengfeng5/article/details/7786595</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/block2016/p/5596676.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/block2016/p/5596676.html</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/u012721519/article/details/79612128" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u012721519/article/details/79612128</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/luop/p/4334160.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/luop/p/4334160.html</a></p>
</li>
<li>
<p><a href="http://www.alonemonkey.com/2016/05/25/aes-and-des/" target="_blank" rel="noopener noreferrer">http://www.alonemonkey.com/2016/05/25/aes-and-des/</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/luotuo44/article/details/41645597" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/luotuo44/article/details/41645597</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/shelldon/article/details/54729687" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/shelldon/article/details/54729687</a></p>
</li>
<li>
<p><a href="http://abcdxyzk.github.io/blog/2018/04/16/isal-erase-3/" target="_blank" rel="noopener noreferrer">http://abcdxyzk.github.io/blog/2018/04/16/isal-erase-3/</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/bupt073114/article/details/27382533" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/bupt073114/article/details/27382533</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/u011516178/article/details/81221646" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u011516178/article/details/81221646</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/u012620515/article/details/49893905" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u012620515/article/details/49893905</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/frog112111/archive/2012/08/19/2646012.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/frog112111/archive/2012/08/19/2646012.html</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/xinyuyang/p/11439638.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/xinyuyang/p/11439638.html</a></p>
</li>
</ol>]]></description></item><item><title>百万富翁问题</title><link>https://xinyu-yang.github.io/blog/2021/21-05-12_millionaire-problem/</link><pubDate>Wed, 12 May 2021 23:50:52 +0800</pubDate><author>作者</author><guid>https://xinyu-yang.github.io/blog/2021/21-05-12_millionaire-problem/</guid><description><![CDATA[<h2 id="问题概述">问题概述</h2>
<p>该问题由第一位也是唯一一位华人图灵奖得主姚期智先生于1982年提出，问题很简单：</p>
<blockquote>
<p>在缺少第三方公信平台的情况下，有两个百万富翁希望比较财富的高低，但是又不想让对方知道自己的具体的财富有多少。</p>
</blockquote>
<p>该问题是另外一个通用问题的特殊形式，即：</p>
<blockquote>
<p>$a_1, a_2 &hellip; a_n$分别拥有值$x_1, x_2 &hellip; x_n$，如何在互相不泄露这些值的情况下计算$F(x_1, x_2 &hellip; x_n)$</p>
</blockquote>
<p>姚期智的<a href="https://research.cs.wisc.edu/areas/sec/yao1982-ocr.pdf" target="_blank" rel="noopener noreferrer">这篇论文</a>就是讨论了以上问题，对于百万富翁问题，记得有人提出可以采用称重的方法，即将富翁所有的财富转换成金子，并放置在不透明的盒子里，然后用一个天平来测量哪一个盒子更重。这是一个不错的方案，但是还是隐含借助了第三方的可信机构，抛开天平的可信性不谈，给富翁兑换金子的人（即使是多个）总是知道富翁财产的。</p>
<h2 id="解决方案">解决方案</h2>
<p>那能不能借助科学的力量解决该问题呢？姚期智在他的论文里给出了肯定答案，论文中提到其一共提出了三种解决方案，但是限于篇幅只介绍了其中一种，本文也主要介绍该方法，该方法非常巧妙，让人拍案称绝，也让我感受到了图灵奖实力的冰山一角。</p>
<p>该方法主要借助公钥加密和单向函数来实现双方对对方消息的不可知。
具体内容如下：</p>
<ol>
<li>
<p>假设双方为A和B，财产分别为a和b，财产范围为[0, N]。首先由A生成一对公私钥对$(PK,P)$（不失一般性），然后将公$PK$发送给B。B选择一个随机数r，然后计算$n=Enc(PK,r)-b$，并将$n$发送给A。</p>
</li>
<li>
<p>A收到之后便使用$n+i,\ i\in [0,N]$构造一个数组，并使用私钥进行加密，最终的结果为：$(Enc(P,n),Enc(P,n+1)&hellip;Enc(P,n+N))$，其中有一个$i$的值为A的财产a，即有一个$n+i$的值为$Enc(PK,r)$，但是和明显A并不知道是哪一个。</p>
</li>
<li>
<p>接下来A进行进一步操作，其将数组中序号大于其财产的值加一，即最终值为$Enc(P,n+i)+1,\text{if i &gt; a}$。然后选取一个位于财产范围内的素数$p$，将数组中的所有数值对$p$取余。最终得到：
$$
(Enc(P,n)\mod p, Enc(P,n+1)\mod p, &hellip;
$$
$$
(Enc(P,n+a)+1)\mod p, &hellip; (Enc(P,n+N)+1)\mod p)
$$
A将该数组和$p$发送给B。</p>
</li>
<li>
<p>B收到该数组之后，使用PK对公式中的每一项进行解密，如果第b项的值为$r\mod p$，那么说明A的财富值大于B的财富值，否则，A的财富值小于等于B的财富值。因为，如果A的财富值大于B的财富值，则数组中的第b项为$Enc(P,n+b)\mod p = Enc(P, Enc(PK, r))\mod p$，否则该值将为$Enc(P,n+b)+1\mod p$。</p>
</li>
</ol>
<p>通过以上方式可以实现在不互相泄露信息的情况下比较财富的数值，其中加一和取余是核心操作，尤其是取余，因为其相当于一个单向函数，所以可以向B隐藏A的信息，如果没有该步骤，那么A的信息将很容易被泄露。</p>
<h2 id="参考文献">参考文献</h2>
<p>[1] <a href="https://research.cs.wisc.edu/areas/sec/yao1982-ocr.pdf" target="_blank" rel="noopener noreferrer">A. C. Yao, “Protocols for Secure Computations,” </a></p>
<p>[2] <a href="https://zhiqiang.org/cs/yao-millionaires-problem.html" target="_blank" rel="noopener noreferrer">https://zhiqiang.org/cs/yao-millionaires-problem.html</a></p>]]></description></item><item><title>Count Sketch</title><link>https://xinyu-yang.github.io/blog/2021/21-04-12_count-sketch/</link><pubDate>Mon, 12 Apr 2021 10:01:05 +0800</pubDate><author>作者</author><guid>https://xinyu-yang.github.io/blog/2021/21-04-12_count-sketch/</guid><description><![CDATA[<h2 id="算法介绍">算法介绍</h2>
<p>按照出现时间，该算法比<a href="../21-04-06_count-min-sketch/" rel="">count-min sketch</a>出现的时间更早，但似乎没有count-min sketch应用广泛。该算法的大体思想与count-min sketch相似，只是有少许不同。
首先介绍算法的过程，初始化$t$个独立的hash函数$h_1, h_2, &hellip;,h_t$，每一个hash函数都是从集合$[n] \to [k]$的映射。同时还要初始化$t$个符号函数$s_i : [n] \to [\pm 1]$，然后初始化一个二维矩阵，如下图所示：</p>
<center>
<a></a>
</center>
<p>对于具有m个元素的集合A，对其进行如下操作:</p>
<hr>
<ul>
<li>Set all $C_{i,j}=0$</li>
<li>for i=0 to m do
<ul>
<li>for j=0 to t do
<ul>
<li>$C_{j,h_{j}(a_i)}$ += $s_j (a_i)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>该操作与count-min sketch唯一不同的点在于，最后加的值有可能是1或者-1。</p>
<p>当查找一个元素出现的次数时，只需要计算
$$\check{f_{q}}=median\ C_{j,h_{j}(q)},\ j\in [t]$$</p>
<p>这里与count-min sketch不同的是，本方法所产生的值有可能是正也有可能是负，有可能假阳也有可能假阴，而count-min sketch中只有正，所以一定会产生假阳性。仅从直觉上来判断，似乎选中间值是合理的，因为正负相互抵消，比较理想的情况就是恰好抵消完，那就没有误差了。</p>
<h2 id="分析">分析</h2>
<p>参考了几篇文章，甚至参考了作者的<a href="https://www.cs.rutgers.edu/~farach/pubs/FrequentStream.pdf" target="_blank" rel="noopener noreferrer">原文</a>，其证明方法都不太一样，尴尬的是我一个都没看懂😂，哎~等能看懂再补上吧。。。</p>
<blockquote>
<p>路漫漫其修远兮，吾将上下而求索啊</p>
</blockquote>
<h2 id="代码实现">代码实现</h2>
<p>参考文献 <a href="https://wangshusen.github.io/code/countsketch.html" target="_blank" rel="noopener noreferrer">https://wangshusen.github.io/code/countsketch.html</a> 中就有一个代码实现，而且有动态图展示。</p>
<h2 id="参考文献">参考文献</h2>
<ol>
<li><a href="https://web.stanford.edu/class/cs369g/files/lectures/lec8.pdf" target="_blank" rel="noopener noreferrer">https://web.stanford.edu/class/cs369g/files/lectures/lec8.pdf</a></li>
<li><a href="https://www.cs.rutgers.edu/~farach/pubs/FrequentStream.pdf" target="_blank" rel="noopener noreferrer">https://www.cs.rutgers.edu/~farach/pubs/FrequentStream.pdf</a></li>
<li><a href="https://wangshusen.github.io/code/countsketch.html" target="_blank" rel="noopener noreferrer">https://wangshusen.github.io/code/countsketch.html</a></li>
</ol>]]></description></item><item><title>当我们在谈论环境保护的时候我们在谈论什么？</title><link>https://xinyu-yang.github.io/blog/2021/21-04-10_climate-change/</link><pubDate>Sat, 10 Apr 2021 23:30:33 +0800</pubDate><author>作者</author><guid>https://xinyu-yang.github.io/blog/2021/21-04-10_climate-change/</guid><description><![CDATA[<p>  最近看了一些科普方面的文章和视频，所以对气候变化这件事情有了一些思考，特此记录。因为只是作为个人天马行空思考的记录，所以并无科学严谨性可言，因此几乎不会引用任何的专业文献和专业数据。</p>
<p>  我们现在在讨论气候变化的时候，总是在说由于人类活动的原因，使得全球气候变暖，或者森林遭到砍伐，土地荒漠化等。这些环境的变化在人类生存的历史上也许是重大的环境变迁，但是如果纵观地球的发展史，就会发现，相对于地球环境变化的惊涛骇浪，现在我们所经历的变化不过是平静湖面上的微波涟漪。
那么为什么我们会对现在的环境变化如此担忧呢？我感觉答案正如某院士（记不清楚名字）在采访时所说的那样，人类不是在保护环境，人类只不过是在保护自己。</p>
<p>  地球的环境一直都处在变化当中，其中不乏有极端夸张的气候环境，极寒或者极热，但是地球也没出问题，所以现在地球出现的这点变化，还轮不到人类去拯救的地步。因此是不是可以理解为人类所拯救的那个“地球”只不过是人类所适宜生存的那个地球状态。
毕竟相对于地球气候变化的幅度，人类所能适宜生存的气候范围实在是太小了，人类的历史相对于地球生命的历史也不过是短短一瞬。</p>
<p>  不得不感叹人类在大自然面前如此渺小，即使人类已经在科技方面取得了重大进步，已经具备了一定的抵御自然灾害的能力，甚至有时会产生人类已经战胜大自然的错觉。但是当我们面临大自然的时候，显得是那么的无能为力。人类毫无疑问是大自然的一部分，也就是从某种意义上讲人类能够对大自然所做的一切，也都是大自然的命运安排。这种宿命论似乎有些悲观，因为人类看似具备自我思考的能力，但很可能永远无法突破大自然的限制。但并不是说人类的探索都是没有意义的，毕竟不去探索，我们永远无法知道自己可以做到什么。</p>
<p>  个人感觉人类应当具备适应环境变化的能力，而不是一直待在舒适圈里。因为也许人类的出现将不可避免地导致大自然朝向某个方向变化，即使人类真的能保护现有环境，抑制全球变暖，使这些较为明显的环境因素保持稳定，但是我们对地球地改变将潜移默化地从很多方面体现出来，也许是人类想象不到的方面。
如果人类不能适应现有生存环境之外的环境，那么终将有一天会被能够适应的其他生命所代替。</p>]]></description></item></channel></rss>